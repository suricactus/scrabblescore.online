{"version":3,"sources":["components/GameSettings/GameSettings.js","logic/scoreLists.js","logic/util.js","logic/game.js","components/ScrabbleTile/ScrabbleTile.js","components/ScoreGrid/WordInTiles.js","components/ScoreGrid/ScoreGridCell.js","components/ScoreGrid/ScoreGrid.js","components/ScoreGrid/ScoreGridMobile.js","components/Tooltip/Tooltip.js","components/ScrabbleInputBox/ModifierTile.js","components/ScrabbleInputBox/WithModifierPopover.js","components/ScrabbleInputBox/ScrabbleInputBox.js","components/ScrabbleScoreKeeper/CurrentScore.js","components/ScrabbleScoreKeeper/InGameControls.js","components/ScrabbleScoreKeeper/InGameOverControls.js","components/ScrabbleScoreKeeper/ScoreKeeper.js","components/ScrabbleScoreKeeper/ScrabbleScoreKeeper.js","serviceWorker.js","index.js"],"names":["GameSettings","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeOfName","bind","assertThisInitialized","handleChangeOfLanguage","handleGameStart","state","numberOfPlayers","playerNames","language","i","e","slice","target","value","setState","_this$state","onGameStart","preventDefault","map","name","concat","_this2","_this$state2","react_default","a","createElement","className","id","onChange","toConsumableArray","Array","_","key","type","length","placeholder","onClick","React","Component","scoreListsMap","en","scores","o","u","l","n","r","s","t","d","g","b","c","m","p","f","h","v","w","y","k","j","x","q","z","fr","ru","о","а","е","и","н","р","с","т","в","д","к","л","п","у","м","б","г","ь","я","ё","ы","й","з","ж","х","ц","ч","ш","э","ю","ф","щ","ъ","resizeArray","array","desiredLength","defaultValue","output","push","scrabbleScore","word","modifiers","result","split","forEach","letter","score","toLowerCase","modifier","Turn","words","bingo","game","isEmpty","getCurrentTurn","Game","players","currentPlayerIndex","leftOversTurnNumber","playersTurns","currentTurn","turn","_setTurn","getCurrentTurnNumber","newGame","empty","newPlayerIndex","isGameOver","getCurrentPlayer","history","playerIndex","reaperIndexes","total","Math","abs","reapers","totalLeftOverScore","reaperIndex","upToMove","totalScores","getTotalScore","indexesOf","max","apply","turnNumber","playerCopy","player","totalScore","totals","getRunningTotals","undefined","ScrabbleTile","modifierClass","toUpperCase","WordInTiles","_this$props","letterTiles","components_ScrabbleTile_ScrabbleTile","ScoreGridCell","rows","ScoreGrid_WordInTiles","rowSpan","_this$props2","isPassed","renderPassed","renderNormal","ScoreGrid","align","activePlayerClass","ScoreGrid_ScoreGridCell","ScoreGridMobile","console","log","colSpan","Tooltip","_ref","children","tooltip","hideArrow","objectWithoutProperties","react_popper_tooltip","assign","_ref2","arrowRef","tooltipRef","getArrowProps","getTooltipProps","placement","ref","data-placement","_ref3","getTriggerProps","triggerRef","ModifierTile","role","onTouchEnd","tileText","WithModifierPopover","handleClick","handleVisibilityChange","tooltipShown","modifiertype","modifierValue","stopPropagation","argument","components_Tooltip_Tooltip","onVisibilityChange","trigger","portalContainer","document","getElementsByClassName","ScrabbleInputBox_ModifierTile","ScrabbleInputBox","textHiddenInput","createRef","focus","handleHiddenInputChange","handleTileClick","inFocus","isLetterAllowed","join","click","letterIndex","current","_this$props3","onBlur","onFocus","maxLength","autoComplete","autoCapitalize","spellCheck","autoCorrect","ScrabbleInputBox_WithModifierPopover","handleModifierChange","CurrentScore","emptyWord","InGameControls","handleChange","handleUndo","handleEndTurn","handleEndGame","handleAddWord","handleBingo","input","currentWord","onSetGame","resetCurrentWord","objectSpread","onUndo","addWord","endTurn","setBingo","endGame","undoDisabled","isMobile","endTurnButtonText","isEndGameButtonDisabled","components_ScrabbleInputBox_ScrabbleInputBox","ScrabbleScoreKeeper_CurrentScore","disabled","checked","htmlFor","InGameOverControls","handleLeftOvers","distributeLeftOversToReapers","getReapers","getSumOfLeftovers","submitButtonText","areLeftOversSubmitted","ScoreKeeper","handleSetGame","renderTieGame","createNewGame","games","currentGame","previousGames","turnBeforeLeftOvers","winners","getWinners","winnerIndex","callPlayerToAction","controlProps","ScoreGrid_ScoreGridMobile","components_ScoreGrid_ScoreGrid","ScrabbleScoreKeeper_InGameOverControls","ScrabbleScoreKeeper_InGameControls","defaultProps","ScrabbleScoreKeeper","handleWindowSizeChange","width","window","innerWidth","addEventListener","removeEventListener","components_GameSettings_GameSettings","ScrabbleScoreKeeper_ScoreKeeper","renderGame","Boolean","location","hostname","match","ReactDOM","render","components_ScrabbleScoreKeeper_ScrabbleScoreKeeper","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.557a902d.chunk.js","sourcesContent":["import React from 'react';\nimport './GameSettings.css';\n\nclass GameSettings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChangeOfName = this.handleChangeOfName.bind(this);\n    this.handleChangeOfLanguage = this.handleChangeOfLanguage.bind(this);\n    this.handleGameStart = this.handleGameStart.bind(this);\n\n    this.state = {\n      numberOfPlayers: 4,\n      playerNames: ['', ''],\n      language: 'en',\n    };\n  }\n\n  handleChangeOfName(i, e) {\n    let { playerNames } = this.state;\n    playerNames = playerNames.slice();\n    playerNames[i] = e.target.value;\n    this.setState({ playerNames });\n  }\n\n  handleChangeOfLanguage(e) {\n    this.setState({ language: e.target.value });\n  }\n\n  handleGameStart(e) {\n    const { playerNames, language } = this.state;\n    const { onGameStart } = this.props;\n    e.preventDefault(); /* prevent form submission */\n    onGameStart(playerNames.map((name, i) => (name || `Player ${i + 1}`)), language);\n  }\n\n  render() {\n    const { language, numberOfPlayers, playerNames } = this.state;\n    return (\n      <div className=\"game-settings\">\n        <select className=\"custom-select\" id=\"language-select\" value={language} onChange={this.handleChangeOfLanguage} >\n          <option value=\"en\">English</option>\n          <option value=\"ru\">Russian</option>\n          <option value=\"fr\">French</option>\n        </select> \n        <div className='LoGo'></div>\n        <span className=\"description\">\n          <p>and welcome to Scrabble Score Online. This is an easy-to-use tool that replaces pen-and-paper for keeping track of Scrabble scores.</p>\n          <p>Simply fill in the players’ names in order that they will take turns and press the “START” button.</p>\n          <p>Relax and enjoy your game, now you don’t need to do any math!</p>\n        </span>\n        <form>\n          <div className=\"player-names-choice-container\">\n            {[...Array(numberOfPlayers)].map((_, i) => (\n              <input\n                onChange={e => this.handleChangeOfName(i, e)}\n                id={`player-name-input-${i}`}\n                key={i}\n                type=\"text\"\n                className={playerNames[i] && playerNames[i].length > 0 ? \"form-control player-name filled\" : \"form-control player-name\"}\n                placeholder={`Player ${i + 1}`}\n              />\n            ))}\n          </div>\n          <div className=\"start-btn-container\">\n            <button onClick={this.handleGameStart} className=\"btn start\">START</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\n\nexport default GameSettings;","export const scoreListsMap = {\n  en: {\n    language: 'English',\n    scores: {\n      a: 1,\n      e: 1,\n      i: 1,\n      o: 1,\n      u: 1,\n      l: 1,\n      n: 1,\n      r: 1,\n      s: 1,\n\t\t\tt: 1,\n      d: 2,\n      g: 2,\n      b: 3,\n      c: 3,\n      m: 3,\n      p: 3,\n      f: 4,\n      h: 4,\n      v: 4,\n      w: 4,\n      y: 4,\n\t\t\tk: 5,\n      j: 8,\n      x: 8,\n      q: 10,\n      z: 10,\n    },\n  },\n  fr: {\n    language: 'French',\n    scores: {\n      e: 1,\n      a: 1,\n      i: 1,\n      n: 1,\n      o: 1,\n      r: 1,\n      s: 1,\n      t: 1,\n      u: 1,\n      l: 1,\n\t\t\td: 2,\n      m: 2,\n      g: 2,\n      b: 3,\n      c: 3,\n      p: 3,\n      f: 4,\n      h: 4,\n      v: 4,\n      j: 8,\n      q: 8,\n      k: 10,\n\t\t\tw: 10,\n      x: 10,\n      y: 10,\n      z: 10,\n    },\n  },\n  ru: {\n    language: 'Russian',\n    scores: {\n      о: 1,\n      а: 1,\n      е: 1,\n      и: 1,\n      н: 1,\n      р: 1,\n      с: 1,\n      т: 1,\n      в: 1,\n\t\t\tд: 2,\n      к: 2,\n      л: 2,\n      п: 2,\n      у: 2,\n      м: 2,\n      б: 3,\n      г: 3,\n      ь: 3,\n      я: 3,\n      ё: 3,\n      ы: 4,\n      й: 4,\n\t\t\tз: 5,\n      ж: 5,\n      х: 5,\n      ц: 5,\n      ч: 5,\n      ш: 8,\n      э: 8,\n      ю: 8,\n      ф: 10,\n      щ: 10,\n      ъ: 10,\n    },\n  },\n};\n","import { scoreListsMap } from './scoreLists';\n\nexport function resizeArray(array, desiredLength, defaultValue) {\n  const output = array.slice(0, desiredLength);\n  while (output.length < desiredLength) output.push(defaultValue);\n  return output;\n}\n\nexport function indexesOf(array, value) {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === value) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nexport function isLetterAllowed(letter, language) {\n  return letter.toLowerCase() in scoreListsMap[language].scores;\n}\n\nexport function scrabbleScore(word, modifiers, language) {\n  let result = 0;\n\n  word.split('').forEach((letter, i) => {\n    let score = scoreListsMap[language].scores[letter.toLowerCase()];\n    // eslint-disable-next-line\n    switch (modifiers[i]) {\n      case 'blank': score *= 0; break;\n      case 'double-letter': score *= 2; break;\n      case 'triple-letter': score *= 3; break;\n    }\n    result += score;\n  });\n\n  modifiers.forEach((modifier) => {\n    // eslint-disable-next-line\n    switch (modifier) {\n      case 'double-word': result *= 2; break;\n      case 'triple-word': result *= 3; break;\n    }\n  });\n  return result;\n}\n\nexport default null;\n","import { resizeArray, indexesOf } from './util';\n\nclass Turn {\n  /* DONE Add test for passed display in the scoregrid */\n  /* DONE once test are added, refactor to take out the passed variable from Turn */\n  constructor(words, bingo) {\n    this.words = words;\n    this.bingo = bingo;\n  }\n\n  static empty() {\n    return new Turn([], false);\n  }\n\n  isEmpty() {\n    return this.words.length === 0;\n  }\n\n  isPassed(game) {\n    return this.isEmpty() && this !== game.getCurrentTurn();\n  }\n\n  get score() {\n    let result = 0;\n    for (let i = 0; i < this.words.length; i++) {\n      result += this.words[i].score;\n    }\n\n    if (this.bingo) {\n      result += 50;\n    }\n\n    return result;\n  }\n}\n\nexport default class Game {\n  constructor(players, currentPlayerIndex, leftOversTurnNumber) {\n    this.currentPlayerIndex = currentPlayerIndex;\n    this.playersTurns = players;\n    this.leftOversTurnNumber = leftOversTurnNumber;\n  }\n\n  static createNewGame(numberOfPlayers) {\n    const turn = Turn.empty();\n    const players = resizeArray([[turn]], numberOfPlayers, []);\n    return new Game(players, 0, null);\n  }\n\n  addWord(word) {\n    const currentTurn = this.getCurrentTurn();\n    const turn = new Turn([...currentTurn.words, word], currentTurn.bingo);\n    return this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), turn);\n  }\n\n  endTurn() {\n    let newGame = this;\n    if (this.getCurrentTurn().isEmpty()) {\n      newGame = this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), Turn.empty());\n    }\n    const newPlayerIndex = (this.currentPlayerIndex + 1) % this.playersTurns.length;\n    const players = this.isGameOver() && (this.getCurrentPlayer() === this.playersTurns[this.playersTurns.length - 1]) ? newGame.playersTurns\n      : newGame.playersTurns.map((history, playerIndex) => (playerIndex === newPlayerIndex ? [...history, Turn.empty()] : history));\n    return new Game(players, newPlayerIndex, this.leftOversTurnNumber);\n  }\n\n  setBingo(value) {\n    const turn = new Turn(this.getCurrentTurn().words, value);\n    return this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), turn);\n  }\n\n  endGame() {\n    return new Game(this.playersTurns, this.currentPlayerIndex, this.getCurrentTurnNumber());\n  }\n\n  isGameOver() {\n    return this.leftOversTurnNumber !== null;\n  }\n\n  areLeftOversSubmitted() {\n    if (this.isGameOver() && this.playersTurns[this.playersTurns.length - 1][this.leftOversTurnNumber] && this.currentPlayerIndex === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  getReapers() {\n    const reaperIndexes = [];\n    for (let i = 0; i < this.playersTurns.length; i++) {\n      if (this.playersTurns[i][this.leftOversTurnNumber].isEmpty()) {\n        reaperIndexes.push(i);\n      }\n    }\n    return reaperIndexes;\n  }\n\n  getSumOfLeftovers() {\n    let total = 0;\n    for (let i = 0; i < this.playersTurns.length; i++) {\n      total += Math.abs(this.playersTurns[i][this.leftOversTurnNumber].score);\n    }\n    return total;\n  }\n\n  distributeLeftOversToReapers(reapers, totalLeftOverScore) {\n    let game = this;\n    reapers.forEach((reaperIndex) => {\n      const turn = new Turn([{ value: '', modifiers: [], score: totalLeftOverScore }], false);\n      game = game._setTurn(reaperIndex, this.leftOversTurnNumber, turn);\n    });\n    return game;\n  }\n\n  getWinners(upToMove) {\n    const totalScores = this.playersTurns.map((_, i) => this.getTotalScore(i, upToMove));\n    return indexesOf(totalScores, Math.max(...totalScores));\n  }\n\n  _setTurn(playerIndex, turnNumber, turn) {\n    const playerCopy = this.playersTurns[playerIndex].slice();\n    playerCopy[turnNumber] = turn;\n    const newPlayers = this.playersTurns.map((player, i) => (i === playerIndex ? playerCopy : player));\n    return new Game(newPlayers, this.currentPlayerIndex, this.leftOversTurnNumber);\n  }\n\n  getCurrentPlayer() {\n    return this.playersTurns[this.currentPlayerIndex];\n  }\n\n  getCurrentTurn() {\n    return this.getCurrentPlayer().slice(-1)[0];\n  }\n\n  getCurrentTurnNumber() {\n    return this.playersTurns[0].length - 1;\n  }\n\n  getCurrentPlayerIndex() {\n    return this.currentPlayerIndex;\n  }\n\n  getRunningTotals(playerIndex) {\n    const player = this.playersTurns[playerIndex];\n    let result = [];\n    let totalScore = 0;\n    for (let i = 0; i < player.length; i++) {\n      totalScore += player[i].score\n      result.push(totalScore);\n    }\n    return result;\n  }\n  \n  getTotalScore(playerIndex, upToMove) {\n    let totals = this.getRunningTotals(playerIndex);\n    if (upToMove !== undefined)\n      return totals[upToMove];\n    return totals.length === 0 ? 0 : totals[totals.length - 1];\n  }\n}\n","import React from 'react';\nimport './ScrabbleTile.css';\n\nfunction ScrabbleTile(props) {\n  const { modifier, letter, score, onClick } = props;\n  const modifierClass = modifier === null ? '' : modifier;\n  return (\n    <span className={`scrabble-letter ${modifierClass}`} onClick={onClick}>\n      <span className=\"letter\">{letter.toUpperCase()}</span>\n      <span className=\"score\">{score}</span>\n    </span>\n  );\n}\nexport default ScrabbleTile;\n","import React from 'react';\nimport { scrabbleScore } from '../../logic/util';\nimport ScrabbleTile from '../ScrabbleTile/ScrabbleTile';\n\nclass WordInTiles extends React.Component {\n  render() {\n    const { word, language } = this.props;\n    const letterTiles = word.value.split('').map((letter, i) => {\n      let tile = (\n        <ScrabbleTile\n          key={i}\n          letter={letter}\n          modifier={word.modifiers[i]}\n          score={scrabbleScore(letter, [null], language)}\n        />\n      );\n      return tile;\n    });\n    return <div>{letterTiles}</div>;\n  }\n}\n\nexport default WordInTiles;\n","import React from 'react';\nimport WordInTiles from './WordInTiles';\n\nconst highScore = 50;\nconst bingoScore = 50;\n\nclass ScoreGridCell extends React.Component {\n  renderPassed() {\n    return (\n      <tr>\n        <td>\n          {'PASS'.split('').map((letter, i) => <span key={i} className=\"score-box\">{letter}</span>)}\n        </td>\n      </tr>\n    );\n  }\n\n  renderNormal() {\n    const { turn, language } = this.props;\n    const rows = turn.words.map((word, i) => (\n\n      <tr key={`row-word-${i}`} className=\"word-row\">\n        <td className=\"word-cell\"><WordInTiles word={word} language={language} /></td>\n        {i === 0\n          ? <td rowSpan={`${turn.bingo ? turn.words.length + 1 : turn.words.length}`} className=\"score-cell\">\n              <span className={turn.score >= highScore ? 'score-box high' : 'score-box'}>\n                {turn.score}\n              </span>\n            </td>\n          : null}\n      </tr>\n    ));\n\n    if (turn.bingo) {\n      rows.push(\n        <tr key=\"bingo\">\n          <td>BINGO</td>\n          <td>\n            <span className=\"score-box high\">{bingoScore}</span>\n          </td>\n\n        </tr>,\n      );\n    }\n    return rows;\n  }\n\n  render() {\n    const { turn, game } = this.props;\n    return (\n      \n      <table className=\"score-grid-cell\">\n        <tbody>\n          {turn.isPassed(game) ? this.renderPassed() : this.renderNormal()}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default ScoreGridCell;\n","import React from 'react';\nimport ScoreGridCell from './ScoreGridCell';\nimport './ScoreGrid.css';\n\nclass ScoreGrid extends React.Component {\n  activePlayerClass(i, currentPlayerIndex) {\n    return i === currentPlayerIndex ? 'player-header current' : 'player-header';\n  }\n\n  render() {\n    const { playerNames, game, language } = this.props;\n    return (\n      <table className=\"table table-bordered\" align=\"center\">\n        <thead>\n          <tr className=\"thead-rows\">\n            <th className=\"move-cell\">Move</th>\n            {playerNames.map((player, i) => (\n              <th\n                key={i}\n                className={this.activePlayerClass(i, game.currentPlayerIndex)}\n              >\n                {player}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody className=\"tbody-rows\">\n          {[...Array(game.getCurrentTurnNumber() + 1)].map((_, i) => (\n            <tr className=\"move-row\" key={i}>\n              <th className=\"move\">{i + 1}</th>\n              {game.playersTurns.map((player, j) => (\n                <td key={j}>\n                  {player[i] ? <ScoreGridCell turn={player[i]} language={language} game={game} />\n                    : null}\n                </td>\n              ))}\n            </tr>\n          ))}\n          <tr className=\"total-score\">\n            <th className=\"move\">TOTAL</th>\n            {playerNames.map((_, i) => <td key={i}>{game.getTotalScore(i)}</td>)}\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default ScoreGrid;\n","import React from 'react';\nimport ScoreGridCell from './ScoreGridCell';\nimport './ScoreGrid.css';\n\nclass ScoreGridMobile extends React.Component {\n  render() {\n    const { playerNames, game, language } = this.props;\n    const totalScores = [...Array(playerNames.length)].map((_, j) => {\n      return game.getRunningTotals(j)\n    });\n    console.log(totalScores)\n\n    return (\n      <table className=\"table table-bordered\" align=\"center\">\n        <thead>\n          <tr className=\"thead-rows\">\n            <th className=\"playerNames\">Names<br />(Total)</th>\n            <th className=\"playerTurn\">Player Turn</th>\n           </tr>\n        </thead>\n        <tbody key='tbody' className=\"tbody-rows\">\n          {game.getCurrentPlayer().map((_, i) => {\n            const moveRow = <tr key={`moverow${i}`} className=\"move-row\">\n                              <td colSpan=\"2\">\n                                {`Move ${i+1}`}\n                              </td>\n                            </tr>;\n            const playerRows = game.playersTurns.map((player, j) => (\n              player[i]\n                ? <tr key={`move${i}_player${j}`}>\n                    <td>\n                      {playerNames[j]}<br />{totalScores[j][i]}\n                    </td>\n\n                    <td>\n                      <ScoreGridCell turn={player[i]} language={language} game={game} />\n                    </td>\n                  </tr>     \n                : null\n              ))\n            return [moveRow, playerRows]\n          })}\n        </tbody>\n      </table>\n    )\n  }\n}\nexport default ScoreGridMobile;","import React from 'react';\nimport TooltipTrigger from 'react-popper-tooltip';\nimport 'react-popper-tooltip/dist/styles.css';\nimport './Tooltip.css';\n\nconst Tooltip = ({\n  children, tooltip, hideArrow, ...props\n}) => (\n  <TooltipTrigger\n    {...props}\n    tooltip={({\n      arrowRef,\n      tooltipRef,\n      getArrowProps,\n      getTooltipProps,\n      placement,\n\n    }) => (\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          className: 'tooltip-container',\n        })}\n      >\n        {!hideArrow && (\n          <div\n            {...getArrowProps({\n              ref: arrowRef,\n              className: 'tooltip-arrow',\n              'data-placement': placement,\n            })}\n          />\n        )}\n        {tooltip}\n      </div>\n    )}\n  >\n    {({ getTriggerProps, triggerRef }) => (\n      <span\n        {...getTriggerProps({\n          ref: triggerRef,\n          className: 'trigger',\n        })}\n      >\n        {children}\n      </span>\n    )}\n  </TooltipTrigger>\n);\n\nexport default Tooltip;\n","import React from 'react';\n\nclass ModifierTile extends React.Component {\n  tileText() {\n    const { modifier } = this.props;\n    switch (modifier) {\n      case 'double-letter': return 'Double letter score';\n      case 'double-word': return 'Double word score';\n      case 'triple-letter': return 'Triple letter score';\n      case 'triple-word': return 'Triple word score';\n      case 'blank': return 'Blank tile';\n      default: return null;\n    }\n  }\n\n  render() {\n    const { onClick, modifier } = this.props;\n    return (\n      <span\n        role=\"button\"\n        onClick={(e) => onClick(modifier,e)}\n        onTouchEnd={(e) => onClick(modifier,e)}\n        className={`modifier ${modifier}`}\n      >\n        <span>\n          {this.tileText()}\n        </span>\n      </span>\n    );\n  }\n}\n\nexport default ModifierTile;\n","import React from 'react';\nimport Tooltip from '../Tooltip/Tooltip';\nimport ModifierTile from './ModifierTile';\n\nclass WithModifierPopover extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n    this.state = {\n      modifier: null,\n      tooltipShown: false,\n    };\n  }\n\n  handleClick(modifiertype, e) {\n    const { modifier } = this.state;\n    const { onChange } = this.props;\n    const modifierValue = (modifiertype === modifier) ? null : modifiertype;\n    this.setState({ modifier: modifierValue, tooltipShown: false });\n    onChange(modifierValue);\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  handleVisibilityChange(argument) {\n    this.setState({ tooltipShown: argument });\n  }\n\n  render() {\n    const { tooltipShown } = this.state;\n    const { children } = this.props;\n    return (\n      <Tooltip\n        onVisibilityChange={this.handleVisibilityChange}\n        tooltipShown={tooltipShown}\n        placement=\"bottom\"\n        trigger=\"click\"\n        portalContainer={document.getElementsByClassName(\"main\")[0]}\n        tooltip={(\n          <div>\n            <ModifierTile modifier=\"double-letter\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"double-word\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"triple-letter\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"triple-word\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"blank\" onClick={this.handleClick} />\n          </div>\n        )}\n      >\n        {children}\n      </Tooltip>\n    );\n  }\n}\n\nexport default WithModifierPopover;\n","import React from 'react';\nimport { resizeArray, scrabbleScore, isLetterAllowed } from '../../logic/util';\nimport WithModifierPopover from './WithModifierPopover';\n\nimport ScrabbleTile from '../ScrabbleTile/ScrabbleTile';\nimport './ScrabbleInputBox.css';\n\nclass ScrabbleInputBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textHiddenInput = React.createRef();\n    this.focus = this.focus.bind(this);\n    this.handleHiddenInputChange = this.handleHiddenInputChange.bind(this);\n    this.handleTileClick = this.handleTileClick.bind(this);\n    this.state = {\n      inFocus: false,\n    };\n  }\n\n  handleHiddenInputChange(e) {\n    const { language, word, onChange } = this.props;\n    const input = e.target.value;\n    const result = input.split('').map(letter => (isLetterAllowed(letter, language) ? letter : ''));\n    const modifiers = resizeArray(word.modifiers, result.length, null);\n    onChange({ value: result.join(''), modifiers });\n    if (document.getElementsByClassName(\"hidden-input\")[0]) { document.getElementsByClassName(\"hidden-input\")[0].click() }\n  }\n\n  handleModifierChange(letterIndex, modifier) {\n    const { word, onChange } = this.props;\n    let modifiers = word.modifiers.slice();\n    modifiers[letterIndex] = modifier;\n    onChange({ value: word.value, modifiers });\n      }\n\n  handleTileClick() {\n    this.focus();\n  }\n\n  focus() {\n    this.textHiddenInput.current.focus();\n  }\n\n  render() {\n    const { language, word } = this.props;\n    const { inFocus } = this.state;\n    return (\n      <div role=\"textbox\" onClick={this.focus} className={`scrabble-input-box${word.value.length > 8 ? ' large' : ''}`}>\n        <input\n          ref={this.textHiddenInput}\n          onChange={this.handleHiddenInputChange}\n          value={word.value}\n          className=\"hidden-input\"\n          onBlur={() => this.setState({ inFocus: false })}\n          onFocus={() => this.setState({ inFocus: true })}\n          type=\"text\"\n          maxLength=\"15\"\n          autoComplete=\"off\"\n          autoCapitalize=\"off\"\n          spellCheck=\"false\"\n          autoCorrect=\"off\"\n        />\n        <div className={inFocus ? 'scrabble-tiles blinker' : 'scrabble-tiles'}>\n          {word.value.split('').map((c, i) => (\n            <WithModifierPopover\n              onChange={modifier => this.handleModifierChange(i, modifier)}\n              key={i}\n            >\n              <ScrabbleTile\n                onClick={this.handleTileClick}\n                letter={c}\n                score={scrabbleScore(c, [null], language)}\n                modifier={word.modifiers[i]}\n              />\n            </WithModifierPopover>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default ScrabbleInputBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction CurrentScore(props) {\n  const { score } = props;\n  return (\n    <div className=\"current-score\">\n      {score}\n    </div>\n  );\n}\n\nCurrentScore.propTypes = {\n  score: PropTypes.number,\n};\n\nexport default CurrentScore;\n","import React from 'react';\nimport { scrabbleScore } from '../../logic/util';\nimport ScrabbleInputBox from '../ScrabbleInputBox/ScrabbleInputBox';\nimport CurrentScore from './CurrentScore';\n\nconst emptyWord = { value: '', modifiers: [], score: 0 };\n\nclass InGameControls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleEndTurn = this.handleEndTurn.bind(this);\n    this.handleEndGame = this.handleEndGame.bind(this);\n    this.handleAddWord = this.handleAddWord.bind(this);\n    this.handleBingo = this.handleBingo.bind(this);\n    this.input = React.createRef();\n    this.state = {\n      currentWord: emptyWord,\n    };\n  }\n\n  componentDidMount() {\n    this.input.current.focus();\n  }\n\n  onSetGame(game) {\n    const { onSetGame } = this.props;\n    onSetGame(game);\n    this.resetCurrentWord();\n  }\n\n  resetCurrentWord() {\n    this.setState({ currentWord: emptyWord });\n    this.input.current.focus();\n  }\n\n  handleChange(word) {\n    const { language } = this.props;\n    const currentWord = { ...word, score: scrabbleScore(word.value, word.modifiers, language) };\n    this.setState({ currentWord });\n  }\n\n  handleUndo() {\n    const { onUndo } = this.props;\n    onUndo();\n    this.resetCurrentWord();\n  }\n\n  handleAddWord() {\n    const { currentWord } = this.state;\n    const { game } = this.props;\n    this.onSetGame(game.addWord(currentWord));\n  }\n\n  handleEndTurn(e) {\n    const { currentWord } = this.state;\n    let { game } = this.props;\n    e.preventDefault(); /* prevent form submission */\n    game = currentWord.value.length !== 0 ? game.addWord(currentWord) : game;\n    this.onSetGame(game.endTurn());\n    //ReactDOM.findDOMNode(this.input.current).scrollIntoView({behavior: \"smooth\", block: \"center\", inline: \"center\"});\n  }\n\n  handleBingo() {\n    const { game, onSetGame } = this.props;\n    onSetGame(game.setBingo(!game.getCurrentTurn().bingo));\n  }\n\n  handleEndGame() {\n    const { game, onSetGame } = this.props;\n    onSetGame(game.endGame());\n  }\n\n  render() {\n    const { currentWord } = this.state;\n    const { game, language, undoDisabled, isMobile } = this.props;\n    const endTurnButtonText = game.getCurrentTurn().isEmpty() && currentWord.value === '' ? 'PASS' : 'END TURN';\n    const isEndGameButtonDisabled = game.currentPlayerIndex !== 0 || currentWord.value !== '' || game.getCurrentTurn().score > 0;\n    const props = {\n      ref: this.input,\n      onChange: this.handleChange,\n      word: currentWord,\n      language,\n    };\n    return (\n      <form autoComplete=\"off\">\n        <ScrabbleInputBox {...props} />\n        {isMobile\n          ? null\n          : <CurrentScore score={currentWord.score} />\n        }\n        <div className=\"buttons\">\n          <div className=\"in-game-controls\">\n            <div className=\"add-word-and-bingo-btns-container\">\n              <button onClick={this.handleAddWord} type=\"button\" className=\"btn word-submit-button add-word\" disabled={currentWord.value === ''}>+ ADD A WORD</button>\n              <div className=\"custom-control custom-switch\">\n                <input onChange={this.handleBingo} type=\"checkbox\" className=\"custom-control-input\" id=\"bingoToggle\" checked={game.getCurrentTurn().bingo} />\n                <label className=\"custom-control-label\" htmlFor=\"bingoToggle\">BINGO</label>\n              </div>\n            </div>\n            <div className=\"submit-btn-container\">\n              <button onClick={this.handleEndTurn} type=\"submit\" className=\"btn pass-endturn-button\">{endTurnButtonText}</button>\n            </div>\n            <div className=\"undo-and-end-game-btns-container\">\n              <button onClick={this.handleUndo} type=\"button\" className=\"btn word-submit-button undo\" disabled={undoDisabled}>UNDO</button>\n              <button onClick={this.handleEndGame} type=\"button\" className=\"btn end-game\" disabled={isEndGameButtonDisabled}>END GAME</button>\n            </div>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\nexport default InGameControls;\n","import React from 'react';\nimport CurrentScore from './CurrentScore';\nimport { scrabbleScore } from '../../logic/util';\nimport ScrabbleInputBox from '../ScrabbleInputBox/ScrabbleInputBox';\n\nconst emptyWord = { value: '', modifiers: [], score: 0 };\n\nclass InGameOverControls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleLeftOvers = this.handleLeftOvers.bind(this);\n    this.input = React.createRef();\n    this.state = {\n      currentWord: emptyWord,\n    };\n  }\n\n  componentDidMount() {\n    this.input.current.focus();\n  }\n\n  resetCurrentWord() {\n    this.setState({ currentWord: emptyWord });\n  }\n\n  handleUndo() {\n    const { onUndo } = this.props;\n    onUndo();\n    this.resetCurrentWord();\n  }\n\n  handleChange(word) {\n    const { language } = this.props;\n    const currentWord = { ...word, score: -scrabbleScore(word.value, word.modifiers, language) };\n    this.setState({ currentWord });\n  }\n\n  handleLeftOvers(e) {\n    const { currentWord } = this.state;\n    let { game, onSetGame } = this.props;\n    e.preventDefault(); /* prevent form submission */\n\n    if (currentWord.value.length !== 0)\n      game = game.addWord(currentWord);\n    game = game.endTurn();\n\n    if (game.currentPlayerIndex === 0)\n      game = game.distributeLeftOversToReapers(game.getReapers(), game.getSumOfLeftovers())\n\n    onSetGame(game);\n    this.resetCurrentWord();\n  }\n\n  render() {\n    const { currentWord } = this.state;\n    const { game, language, undoDisabled } = this.props;\n    const submitButtonText = currentWord.value.length > 0 ? 'SUBMIT LEFTOVERS' : 'SUBMIT NO LEFTOVERS';\n    return (\n      <div>\n        {!game.areLeftOversSubmitted()\n          ? (\n            <form autoComplete=\"off\">\n              <ScrabbleInputBox\n                ref={this.input}\n                onChange={this.handleChange}\n                word={currentWord}\n                language={language}\n              />\n              <CurrentScore score={currentWord.score} />\n              <button onClick={this.handleUndo} type=\"button\" className=\"btn btn-info word-submit-button\" disabled={undoDisabled}>UNDO</button>\n              <button onClick={this.handleLeftOvers} type=\"submit\" className=\"btn btn-danger end-game\">{submitButtonText}</button>\n            </form>\n          )\n          : (\n            <div>\n              <button onClick={this.handleUndo} type=\"button\" className=\"btn btn-info word-submit-button\" disabled={undoDisabled}>UNDO</button>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default InGameOverControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Game from '../../logic/game';\nimport ScoreGrid from '../ScoreGrid/ScoreGrid';\nimport ScoreGridMobile from '../ScoreGrid/ScoreGridMobile';\nimport InGameControls from './InGameControls';\nimport InGameOverControls from './InGameOverControls';\n\nclass ScoreKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleSetGame = this.handleSetGame.bind(this);\n    this.renderTieGame = this.renderTieGame.bind(this);\n    const { playerNames } = this.props;\n    this.state = {\n      game: Game.createNewGame(playerNames.length),\n      games: [],\n    };\n  }\n\n  handleSetGame(currentGame) {\n    let { game, games } = this.state;\n    games = [...games.slice(), game];\n    this.setState({ games, game: currentGame });\n  }\n\n  handleUndo() {\n    const { games } = this.state;\n    const previousGames = games.slice(0, -1);\n    const game = games[games.length - 1];\n    this.setState({ game, games: previousGames });\n  }\n\n  renderTieGame() {\n    const { game } = this.state;\n    const { playerNames } = this.props;\n    const turnBeforeLeftOvers = game.leftOversTurnNumber - 1;\n    const winners = game.getWinners(turnBeforeLeftOvers);\n    return winners.map(winnerIndex => (winners.length > 1\n      ? `${playerNames[winnerIndex]}: ${game.getTotalScore(winnerIndex, turnBeforeLeftOvers)}`\n      : `${playerNames[winnerIndex]} WON`)).join(', ');\n  }\n\n  render() {\n    const { game, games } = this.state;\n    const { playerNames, language, isMobile } = this.props;\n    const callPlayerToAction = `${playerNames[game.currentPlayerIndex]}, submit ${!game.isGameOver()\n                                  ? 'a word:'\n                                  : 'your leftovers:'}`\n                                 \n\n    const controlProps = {\n      onSetGame: this.handleSetGame,\n      onUndo: this.handleUndo,\n      undoDisabled: games.length === 0,\n      isMobile,\n      game,\n      language,\n    };\n    return (\n      <div className=\"score-keeper\">\n      {isMobile\n        ? <ScoreGridMobile playerNames={playerNames} game={game} language={language} />\n        : <ScoreGrid playerNames={playerNames} game={game} language={language} />\n      }\n        <div>\n          {!game.areLeftOversSubmitted()\n            ? <p className=\"bold\">{callPlayerToAction}</p>\n            : (\n              <div className=\"winner\">\n                {game.getWinners().length > 1\n                  ? <h1>{this.renderTieGame()}</h1>\n                  : (\n                    <h1>\n                      {`${playerNames[[...game.getWinners()]]} WON`}\n                    </h1>\n                  )\n                }\n              </div>\n            )\n          }\n          {!game.isGameOver()\n            ? <InGameControls {...controlProps} />\n            : <InGameOverControls {...controlProps} />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nScoreKeeper.propTypes = {\n  playerNames: PropTypes.arrayOf(PropTypes.string),\n  language: PropTypes.string,\n};\n\nScoreKeeper.defaultProps = {\n  playerNames: ['Player 1', 'Player 2'],\n  language: 'en',\n};\n\nexport default ScoreKeeper;\n","import React from 'react';\nimport GameSettings from '../GameSettings/GameSettings';\nimport ScoreKeeper from './ScoreKeeper';\nimport './ScrabbleScoreKeeper.css';\n\nclass ScrabbleScoreKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleGameStart = this.handleGameStart.bind(this);\n    this.handleWindowSizeChange = this.handleWindowSizeChange.bind(this);\n    this.state = {\n      playerNames: [],\n      language: '',\n      width: window.innerWidth\n    };\n  }\n  componentWillMount() {\n    window.addEventListener('resize', this.handleWindowSizeChange);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowSizeChange);\n  }\n\n  handleWindowSizeChange() {\n     this.setState({width: window.innerWidth});\n  };\n\n  handleGameStart(playerNames, language) {\n    this.setState({ playerNames, language });\n  }\n\n  renderGame() {\n    const { playerNames, language, width } = this.state;\n    const isMobile = width <= 815;\n    return playerNames.length === 0\n            ? <GameSettings onGameStart={this.handleGameStart} />\n            : <ScoreKeeper playerNames={playerNames} language={language} isMobile={isMobile}/>\n  }\n\n  render() {\n    const { width } = this.state;\n    const isMobile = width <= 815;\n    return (\n      <div className={\"main \" + (isMobile ? \"mobile\" : \"desktop\")}>\n        {this.renderGame()}\n      </div>\n    )\n  }\n}\n\nexport default ScrabbleScoreKeeper;\n\n/* TODO:\n- use lint to correct the code format (use airbnb plug in)\nX research on how to organize files in src directory (make a css file per component).\n- use airbnb js style guide to refactor your code\nX change all this.state to ==>   const { width } = this.state;\nX fix blinker bug\nX css for every component\n\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It\"s the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ScrabbleScoreKeeper from './components/ScrabbleScoreKeeper/ScrabbleScoreKeeper';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ScrabbleScoreKeeper/>, document.getElementsByClassName('content')[0]);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}