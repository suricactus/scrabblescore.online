{"version":3,"sources":["components/GameSettings/GameSettings.js","logic/scoreLists.js","logic/util.js","logic/game.js","components/ScrabbleTile/ScrabbleTile.js","components/ScoreGrid/WordInTiles.js","components/ScoreGrid/ScoreGridCell.js","components/ScoreGrid/ScoreGrid.js","components/ScrabbleScoreKeeper/CallPlayerToAction.js","components/ScoreGrid/ScoreGridMobile.js","components/Tooltip/Tooltip.js","components/ScrabbleInputBox/ModifierTile.js","components/ScrabbleInputBox/WithModifierPopover.js","components/ScrabbleInputBox/ScrabbleInputBox.js","components/ScrabbleScoreKeeper/InGameControls.js","components/ScrabbleScoreKeeper/InGameOverControls.js","components/ScrabbleScoreKeeper/ScoreKeeper.js","components/ScrabbleScoreKeeper/ScrabbleScoreKeeper.js","serviceWorker.js","index.js"],"names":["GameSettings","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeOfName","bind","assertThisInitialized","handleChangeOfLanguage","handleGameStart","state","numberOfPlayers","playerNames","language","i","e","slice","target","value","setState","_this$state","onGameStart","preventDefault","map","name","concat","_this2","_this$state2","react_default","a","createElement","className","id","onChange","toConsumableArray","Array","_","key","type","length","placeholder","onClick","React","Component","scoreListsMap","en","scores","o","u","l","n","r","s","t","d","g","b","c","m","p","f","h","v","w","y","k","j","x","q","z","fr","ru","о","а","е","и","н","р","с","т","в","д","к","л","п","у","м","б","г","ь","я","ё","ы","й","з","ж","х","ц","ч","ш","э","ю","ф","щ","ъ","resizeArray","array","desiredLength","defaultValue","output","push","scrabbleScore","word","modifiers","result","split","forEach","letter","score","toLowerCase","modifier","Turn","words","bingo","game","isEmpty","getCurrentTurn","Game","players","currentPlayerIndex","leftOversTurnNumber","playersTurns","currentTurn","turn","_setTurn","getCurrentTurnNumber","newGame","empty","newPlayerIndex","isGameOver","getCurrentPlayer","history","playerIndex","reaperIndexes","total","Math","abs","reapers","totalLeftOverScore","reaperIndex","upToMove","totalScores","getTotalScore","indexesOf","max","apply","turnNumber","playerCopy","player","totalScore","totals","getRunningTotals","undefined","ScrabbleTile","modifierClass","role","onKeyDown","toUpperCase","WordInTiles","_this$props","letterTiles","components_ScrabbleTile_ScrabbleTile","ScoreGridCell","rows","ScoreGrid_WordInTiles","rowSpan","_this$props2","isPassed","renderPassed","renderNormal","ScoreGrid","align","ScoreGrid_ScoreGridCell","CallPlayerToAction","isMobile","ScoreGridMobile","scope","colSpan","moveRowText","areLeftOversSubmitted","isComplete","turnIndex","isCurrentPlayersTurn","ScrabbleScoreKeeper_CallPlayerToAction","Tooltip","_ref","children","tooltip","hideArrow","objectWithoutProperties","react_popper_tooltip","assign","_ref2","arrowRef","tooltipRef","getArrowProps","getTooltipProps","placement","ref","data-placement","_ref3","getTriggerProps","triggerRef","ModifierTile","onTouchEnd","tileText","WithModifierPopover","handleClick","handleVisibilityChange","tooltipShown","modifiertype","modifierValue","stopPropagation","argument","components_Tooltip_Tooltip","onVisibilityChange","trigger","portalContainer","document","getElementsByClassName","ScrabbleInputBox_ModifierTile","ScrabbleInputBox","textHiddenInput","createRef","focus","handleHiddenInputChange","handleTileClick","inFocus","elements","click","isLetterAllowed","join","constructor","_clickOnElementByClass","letterIndex","current","_this$props3","onBlur","onFocus","maxLength","autoComplete","autoCapitalize","spellCheck","autoCorrect","ScrabbleInputBox_WithModifierPopover","handleModifierChange","emptyWord","InGameControls","handleChange","handleUndo","handleEndTurn","handleEndGame","handleAddWord","handleBingo","_scrollInputToTheMiddle","input","currentWord","wordsOfFirstPlayerTurn","scrollIntoView","block","onSetGame","resetCurrentWord","objectSpread","onUndo","ReactGA","event","category","action","addWord","endTurn","setBingo","endGame","_this$props4","undoDisabled","endTurnButtonText","isEndGameButtonDisabled","getCurrentPlayerIndex","components_ScrabbleInputBox_ScrabbleInputBox","disabled","checked","htmlFor","InGameOverControls","handleLeftOvers","distributeLeftOversToReapers","getReapers","getSumOfLeftovers","submitButtonText","ScoreKeeper","handleSetGame","renderWinner","createNewGame","games","returnValue","stateObj","window","pushState","addEventListener","beforeUnload","removeEventListener","currentGame","previousGames","turnBeforeLeftOvers","winners","getWinners","winnersTie","winnerIndex","controlProps","src","alt","width","ScoreGrid_ScoreGridMobile","components_ScoreGrid_ScoreGrid","toDisplayCallPlayerToAction","ScrabbleScoreKeeper_InGameOverControls","ScrabbleScoreKeeper_InGameControls","defaultProps","ScrabbleScoreKeeper","handleWindowSizeChange","handlePopState","initialize","pageview","location","pathname","search","innerWidth","components_GameSettings_GameSettings","ScrabbleScoreKeeper_ScoreKeeper","renderGame","Boolean","hostname","match","rootElement","hasChildNodes","hydrate","components_ScrabbleScoreKeeper_ScrabbleScoreKeeper","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8de355fd.chunk.js","sourcesContent":["import React from 'react';\nimport './GameSettings.css';\n\nclass GameSettings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChangeOfName = this.handleChangeOfName.bind(this);\n    this.handleChangeOfLanguage = this.handleChangeOfLanguage.bind(this);\n    this.handleGameStart = this.handleGameStart.bind(this);\n\n    this.state = {\n      numberOfPlayers: 4,\n      playerNames: ['', ''],\n      language: 'en',\n    };\n  }\n\n\n  handleChangeOfName(i, e) {\n    let { playerNames } = this.state;\n    playerNames = playerNames.slice();\n    playerNames[i] = e.target.value;\n    this.setState({ playerNames });\n  }\n\n  handleChangeOfLanguage(e) {\n    this.setState({ language: e.target.value });\n  }\n\n  handleGameStart(e) {\n    const { playerNames, language } = this.state;\n    const { onGameStart } = this.props;\n    e.preventDefault(); /* prevent form submission */\n    onGameStart(playerNames.map((name, i) => (name || `Player ${i + 1}`)), language);\n  }\n\n  render() {\n    const { language, numberOfPlayers, playerNames } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-2 offset-sm-10\">\n            <select className=\"custom-select\" id=\"language-select\" value={language} onChange={this.handleChangeOfLanguage}>\n              <option value=\"en\">English</option>\n              <option value=\"ru\">Russian</option>\n              <option value=\"fr\">French</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <div className=\"logo\"></div>\n            <span className=\"description\">\n              <p>\n                 Hello and welcome to Scrabble Score Online. This is an easy-to-use tool\n                 that replaces pen-and-paper for keeping track of Scrabble scores.\n              </p>\n              <p>\n                 Simply fill in the players’ names in order that they will\n                 take turns and press the “START” button.\n              </p>\n              <p>Relax and enjoy your game, now you don’t need to do any math!</p>\n            </span>\n          </div>\n        </div>\n        <form>\n          <div className=\"player-names-choice-container\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  {[...Array(numberOfPlayers)].map((_, i) => (\n                    <input\n                      onChange={e => this.handleChangeOfName(i, e)}\n                      id={`player-name-input-${i}`}\n                      key={i}\n                      type=\"text\"\n                      className={playerNames[i] && playerNames[i].length > 0 ? 'form-control player-name filled' : 'form-control player-name'}\n                      placeholder={`Player ${i + 1}`}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"start-btn-container\">\n            <button className=\"btn start\" type=\"button\" onClick={this.handleGameStart}>START</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\n\nexport default GameSettings;\n","export const scoreListsMap = {\n  en: {\n    language: 'English',\n    scores: {\n      a: 1,\n      e: 1,\n      i: 1,\n      o: 1,\n      u: 1,\n      l: 1,\n      n: 1,\n      r: 1,\n      s: 1,\n\t\t\tt: 1,\n      d: 2,\n      g: 2,\n      b: 3,\n      c: 3,\n      m: 3,\n      p: 3,\n      f: 4,\n      h: 4,\n      v: 4,\n      w: 4,\n      y: 4,\n\t\t\tk: 5,\n      j: 8,\n      x: 8,\n      q: 10,\n      z: 10,\n    },\n  },\n  fr: {\n    language: 'French',\n    scores: {\n      e: 1,\n      a: 1,\n      i: 1,\n      n: 1,\n      o: 1,\n      r: 1,\n      s: 1,\n      t: 1,\n      u: 1,\n      l: 1,\n\t\t\td: 2,\n      m: 2,\n      g: 2,\n      b: 3,\n      c: 3,\n      p: 3,\n      f: 4,\n      h: 4,\n      v: 4,\n      j: 8,\n      q: 8,\n      k: 10,\n\t\t\tw: 10,\n      x: 10,\n      y: 10,\n      z: 10,\n    },\n  },\n  ru: {\n    language: 'Russian',\n    scores: {\n      о: 1,\n      а: 1,\n      е: 1,\n      и: 1,\n      н: 1,\n      р: 1,\n      с: 1,\n      т: 1,\n      в: 1,\n\t\t\tд: 2,\n      к: 2,\n      л: 2,\n      п: 2,\n      у: 2,\n      м: 2,\n      б: 3,\n      г: 3,\n      ь: 3,\n      я: 3,\n      ё: 3,\n      ы: 4,\n      й: 4,\n\t\t\tз: 5,\n      ж: 5,\n      х: 5,\n      ц: 5,\n      ч: 5,\n      ш: 8,\n      э: 8,\n      ю: 8,\n      ф: 10,\n      щ: 10,\n      ъ: 10,\n    },\n  },\n};\n","import { scoreListsMap } from './scoreLists';\n\nexport function resizeArray(array, desiredLength, defaultValue) {\n  const output = array.slice(0, desiredLength);\n  while (output.length < desiredLength) output.push(defaultValue);\n  return output;\n}\n\nexport function indexesOf(array, value) {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === value) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nexport function isLetterAllowed(letter, language) {\n  return letter.toLowerCase() in scoreListsMap[language].scores;\n}\n\nexport function scrabbleScore(word, modifiers, language) {\n  let result = 0;\n\n  word.split('').forEach((letter, i) => {\n    let score = scoreListsMap[language].scores[letter.toLowerCase()];\n    // eslint-disable-next-line\n    switch (modifiers[i]) {\n      case 'blank': score *= 0; break;\n      case 'double-letter': score *= 2; break;\n      case 'triple-letter': score *= 3; break;\n    }\n    result += score;\n  });\n\n  modifiers.forEach((modifier) => {\n    // eslint-disable-next-line\n    switch (modifier) {\n      case 'double-word': result *= 2; break;\n      case 'triple-word': result *= 3; break;\n    }\n  });\n  return result;\n}\n\nexport default null;\n","import { resizeArray, indexesOf } from './util';\n\nclass Turn {\n  /* DONE Add test for passed display in the scoregrid */\n  /* DONE once test are added, refactor to take out the passed variable from Turn */\n  constructor(words, bingo) {\n    this.words = words;\n    this.bingo = bingo;\n  }\n\n  static empty() {\n    return new Turn([], false);\n  }\n\n  isEmpty() {\n    return this.words.length === 0;\n  }\n\n  isPassed(game) {\n    return this.isEmpty() && this !== game.getCurrentTurn();\n  }\n\n  isComplete(game) {\n    return this !== game.getCurrentTurn()\n  }\n\n  get score() {\n    let result = 0;\n    for (let i = 0; i < this.words.length; i++) {\n      result += this.words[i].score;\n    }\n\n    if (this.bingo) {\n      result += 50;\n    }\n\n    return result;\n  }\n}\n\nexport default class Game {\n  constructor(players, currentPlayerIndex, leftOversTurnNumber) {\n    this.currentPlayerIndex = currentPlayerIndex;\n    this.playersTurns = players;\n    this.leftOversTurnNumber = leftOversTurnNumber;\n  }\n\n  static createNewGame(numberOfPlayers) {\n    const turn = Turn.empty();\n    const players = resizeArray([[turn]], numberOfPlayers, []);\n    return new Game(players, 0, null);\n  }\n\n  addWord(word) {\n    const currentTurn = this.getCurrentTurn();\n    const turn = new Turn([...currentTurn.words, word], currentTurn.bingo);\n    return this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), turn);\n  }\n\n  endTurn() {\n    let newGame = this;\n    if (this.getCurrentTurn().isEmpty()) {\n      newGame = this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), Turn.empty());\n    }\n    const newPlayerIndex = (this.currentPlayerIndex + 1) % this.playersTurns.length;\n    const players = this.isGameOver() && (this.getCurrentPlayer() === this.playersTurns[this.playersTurns.length - 1]) ? newGame.playersTurns\n      : newGame.playersTurns.map((history, playerIndex) => (playerIndex === newPlayerIndex ? [...history, Turn.empty()] : history));\n    return new Game(players, newPlayerIndex, this.leftOversTurnNumber);\n  }\n\n  setBingo(value) {\n    const turn = new Turn(this.getCurrentTurn().words, value);\n    return this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), turn);\n  }\n\n  endGame() {\n    return new Game(this.playersTurns, this.currentPlayerIndex, this.getCurrentTurnNumber());\n  }\n\n  isGameOver() {\n    return this.leftOversTurnNumber !== null;\n  }\n\n  areLeftOversSubmitted() {\n    if (this.isGameOver() && this.playersTurns[this.playersTurns.length - 1][this.leftOversTurnNumber] && this.currentPlayerIndex === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  getReapers() {\n    const reaperIndexes = [];\n    for (let i = 0; i < this.playersTurns.length; i++) {\n      if (this.playersTurns[i][this.leftOversTurnNumber].isEmpty()) {\n        reaperIndexes.push(i);\n      }\n    }\n    return reaperIndexes;\n  }\n\n  getSumOfLeftovers() {\n    let total = 0;\n    for (let i = 0; i < this.playersTurns.length; i++) {\n      total += Math.abs(this.playersTurns[i][this.leftOversTurnNumber].score);\n    }\n    return total;\n  }\n\n  distributeLeftOversToReapers(reapers, totalLeftOverScore) {\n    let game = this;\n    reapers.forEach((reaperIndex) => {\n      const turn = new Turn([{ value: '', modifiers: [], score: totalLeftOverScore }], false);\n      game = game._setTurn(reaperIndex, this.leftOversTurnNumber, turn);\n    });\n    return game;\n  }\n\n  getWinners(upToMove) {\n    const totalScores = this.playersTurns.map((_, i) => this.getTotalScore(i, upToMove));\n    return indexesOf(totalScores, Math.max(...totalScores));\n  }\n\n  _setTurn(playerIndex, turnNumber, turn) {\n    const playerCopy = this.playersTurns[playerIndex].slice();\n    playerCopy[turnNumber] = turn;\n    const newPlayers = this.playersTurns.map((player, i) => (i === playerIndex ? playerCopy : player));\n    return new Game(newPlayers, this.currentPlayerIndex, this.leftOversTurnNumber);\n  }\n\n  getCurrentPlayer() {\n    return this.playersTurns[this.currentPlayerIndex];\n  }\n\n  getCurrentTurn() {\n    return this.getCurrentPlayer().slice(-1)[0];\n  }\n\n  getCurrentTurnNumber() {\n    return this.playersTurns[0].length - 1;\n  }\n\n  getCurrentPlayerIndex() {\n    return this.currentPlayerIndex;\n  }\n\n  getRunningTotals(playerIndex) {\n    const player = this.playersTurns[playerIndex];\n    let result = [];\n    let totalScore = 0;\n    for (let i = 0; i < player.length; i++) {\n      totalScore += player[i].score\n      result.push(totalScore);\n    }\n    return result;\n  }\n  \n  getTotalScore(playerIndex, upToMove) {\n    let totals = this.getRunningTotals(playerIndex);\n    if (upToMove !== undefined)\n      return totals[upToMove];\n    return totals.length === 0 ? 0 : totals[totals.length - 1];\n  }\n}\n","import React from 'react';\nimport './ScrabbleTile.css';\n\nfunction ScrabbleTile(props) {\n  const {\n    modifier, letter, score, onClick,\n  } = props;\n  const modifierClass = modifier === null ? '' : modifier;\n  return (\n    <span className={`scrabble-letter ${modifierClass}`} role=\"button\" onClick={onClick} onKeyDown={onClick}>\n      <span className=\"letter\">{letter.toUpperCase()}</span>\n      <span className=\"score\">{score}</span>\n    </span>\n  );\n}\nexport default ScrabbleTile;\n","import React from 'react';\nimport { scrabbleScore } from '../../logic/util';\nimport ScrabbleTile from '../ScrabbleTile/ScrabbleTile';\n\nclass WordInTiles extends React.Component {\n  render() {\n    const { word, language } = this.props;\n    const letterTiles = word.value.split('').map((letter, i) => {\n      const tile = (\n        <ScrabbleTile\n          key={i}\n          letter={letter}\n          modifier={word.modifiers[i]}\n          score={scrabbleScore(letter, [null], language)}\n        />\n      );\n      return tile;\n    });\n    return <div>{letterTiles}</div>;\n  }\n}\n\nexport default WordInTiles;\n","import React from 'react';\nimport WordInTiles from './WordInTiles';\n\nclass ScoreGridCell extends React.Component {\n  renderPassed() {\n    return (\n      <tr>\n        <td>PASS</td>\n      </tr>\n    );\n  }\n\n  renderNormal() {\n    const { turn, language } = this.props;\n    const rows = turn.words.map((word, i) => (\n\n      <tr key={`row-word-${i}`} className=\"word-row\">\n        <td className=\"word-cell\"><WordInTiles word={word} language={language} /></td>\n        {i === 0\n          ? (\n            <td rowSpan={`${turn.bingo ? turn.words.length + 1 : turn.words.length}`} className=\"score-cell\">\n              <span className=\"score-box\">\n                {turn.score}\n              </span>\n            </td>\n          )\n          : null}\n      </tr>\n    ));\n\n    if (turn.bingo) {\n      rows.push(\n        <tr key=\"bingo\" className=\"table-row bingo-row\">\n          <td className=\"bingo-cell\"><span className=\"bingo\">BINGO!</span></td>\n        </tr>,\n      );\n    }\n    return rows;\n  }\n\n  render() {\n    const { turn, game } = this.props;\n    return (\n      <table className=\"score-grid-cell\">\n        <tbody>\n          {turn.isPassed(game) ? this.renderPassed() : this.renderNormal()}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default ScoreGridCell;\n","import React from 'react';\nimport ScoreGridCell from './ScoreGridCell';\nimport './ScoreGrid.css';\n\nfunction ScoreGrid(props) {\n  const { playerNames, game, language } = props;\n  const getTurnClass = (turn, currentTurn) => (\n    turn === currentTurn ? 'player-turn active' : 'player-turn'\n  );\n\n  return (\n    <table className=\"table table-bordered\" align=\"center\">\n      <thead>\n        <tr className=\"thead-rows\">\n          <th className=\"move-header\">Move</th>\n          {playerNames.map((player, i) => (\n            <th\n              key={i}\n              className=\"player-header\"\n            >\n              {player}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody className=\"tbody-rows\">\n        {[...Array(game.getCurrentTurnNumber() + 1)].map((_, i) => (\n          <tr className=\"turn-row\" key={i}>\n            <th className=\"move-number\">{i + 1}</th>\n            {game.playersTurns.map((player, j) => (\n              <td key={j} className={getTurnClass(player[i], game.getCurrentTurn())}>\n                {player[i] ? <ScoreGridCell turn={player[i]} language={language} game={game} />\n                  : null}\n              </td>\n            ))}\n          </tr>\n        ))}\n        <tr className=\"total-score\">\n          <th className=\"move\">TOTAL</th>\n          {playerNames.map((_, i) => <td key={i}>{game.getTotalScore(i)}</td>)}\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default ScoreGrid;\n","import React from 'react';\n\nfunction CallPlayerToAction(props) {\n  const { isMobile, game, playerNames } = props;\n  \n  function callPlayerToAction() {\n    const firstPart = isMobile\n      ? 'Submit '\n      : `${playerNames[game.currentPlayerIndex]}, submit `\n    const secondPart = !game.isGameOver()\n        ? 'a word or end turn'\n        : 'your leftovers'\n    return firstPart + secondPart\n  }\n\n  return (\n    <div className=\"row justify-content-center\">\n      <span className=\"call-player-to-action\">{callPlayerToAction()}</span>\n    </div>\n  );\n}\n\nexport default CallPlayerToAction;\n","import React from 'react';\nimport ScoreGridCell from './ScoreGridCell';\nimport CallPlayerToAction from '../ScrabbleScoreKeeper/CallPlayerToAction';\nimport './ScoreGrid.css';\n\nclass ScoreGridMobile extends React.Component {\n  moveRowText(i) {\n    const { game } = this.props;\n    return game.isGameOver() && game.leftOversTurnNumber === i ? 'Leftovers Accounting' : `Move ${i + 1}`;\n  }\n\n  render() {\n    const { playerNames, game, language } = this.props;\n    const totalScores = [...Array(playerNames.length)].map((_, j) => game.getRunningTotals(j));\n    const toDisplayTotals = (turn) => {\n      if (!game.areLeftOversSubmitted()) {\n        return turn.isComplete(game);\n      }\n      return true;\n    };\n\n    const isCurrentPlayersTurn = (player, turnIndex) => player === game.getCurrentPlayer()\n                                                      && player[turnIndex].isEmpty()\n                                                      && !player[turnIndex].isPassed(game)\n                                                      && !player[turnIndex].bingo;\n    return (\n      <table className=\"table table-bordered\">\n        <thead>\n          <tr className=\"thead-rows\">\n            <th className=\"playerNames\" scope=\"col\">\nNames\n              <br />\n(Total)\n            </th>\n            <th className=\"playerTurn\" scope=\"col\">Player Turn</th>\n          </tr>\n        </thead>\n        <tbody key=\"tbody\" className=\"tbody-rows\">\n          {game.getCurrentPlayer().map((_, i) => {\n            const moveRow = (\n              <tr key={`moverow${i}`} className=\"move-row\">\n                <td colSpan=\"2\">\n                  {this.moveRowText(i)}\n                </td>\n              </tr>\n            );\n            const playerRows = game.playersTurns.map((player, j) => (\n              player[i]\n                ? (\n                  <tr key={`move${i}_player${j}`} className=\"player-move-row\">\n                    <td className=\"player-name\">\n                      {playerNames[j]}\n                      <br />\n                      {toDisplayTotals(player[i]) ? totalScores[j][i] : null}\n                    </td>\n\n                    <td className=\"player-turn\">\n                      {isCurrentPlayersTurn(player, i)\n                        ? <CallPlayerToAction game={game} playerNames={playerNames} isMobile />\n                        : <ScoreGridCell turn={player[i]} language={language} game={game} />\n                      }\n                    </td>\n                  </tr>\n                )\n                : null\n            ));\n            return [moveRow, playerRows];\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\nexport default ScoreGridMobile;\n","import React from 'react';\nimport TooltipTrigger from 'react-popper-tooltip';\nimport 'react-popper-tooltip/dist/styles.css';\nimport './Tooltip.css';\n\nconst Tooltip = ({\n  children, tooltip, hideArrow, ...props\n}) => (\n  <TooltipTrigger\n    {...props}\n    tooltip={({\n      arrowRef,\n      tooltipRef,\n      getArrowProps,\n      getTooltipProps,\n      placement,\n\n    }) => (\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          className: 'tooltip-container',\n        })}\n      >\n        {!hideArrow && (\n          <div\n            {...getArrowProps({\n              ref: arrowRef,\n              className: 'tooltip-arrow',\n              'data-placement': placement,\n            })}\n          />\n        )}\n        {tooltip}\n      </div>\n    )}\n  >\n    {({ getTriggerProps, triggerRef }) => (\n      <span\n        {...getTriggerProps({\n          ref: triggerRef,\n          className: 'trigger',\n        })}\n      >\n        {children}\n      </span>\n    )}\n  </TooltipTrigger>\n);\n\nexport default Tooltip;\n","import React from 'react';\n\nclass ModifierTile extends React.Component {\n  tileText() {\n    const { modifier } = this.props;\n    switch (modifier) {\n      case 'double-letter': return 'Double letter score';\n      case 'double-word': return 'Double word score';\n      case 'triple-letter': return 'Triple letter score';\n      case 'triple-word': return 'Triple word score';\n      case 'blank': return 'Blank tile';\n      default: return null;\n    }\n  }\n\n  render() {\n    const { onClick, modifier } = this.props;\n    return (\n      <span\n        role=\"button\"\n        onClick={e => onClick(modifier, e)}\n        onKeyDown={e => onClick(modifier, e)}\n        onTouchEnd={e => onClick(modifier, e)}\n        className={`modifier ${modifier}`}\n      >\n        <span>\n          {this.tileText()}\n        </span>\n      </span>\n    );\n  }\n}\n\nexport default ModifierTile;\n","import React from 'react';\nimport Tooltip from '../Tooltip/Tooltip';\nimport ModifierTile from './ModifierTile';\n\nclass WithModifierPopover extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n    this.state = {\n      modifier: null,\n      tooltipShown: false,\n    };\n  }\n\n  handleClick(modifiertype, e) {\n    const { modifier } = this.state;\n    const { onChange } = this.props;\n    const modifierValue = (modifiertype === modifier) ? null : modifiertype;\n    this.setState({ modifier: modifierValue, tooltipShown: false });\n    onChange(modifierValue);\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  handleVisibilityChange(argument) {\n    this.setState({ tooltipShown: argument });\n  }\n\n  render() {\n    const { tooltipShown } = this.state;\n    const { children } = this.props;\n    return (\n      <Tooltip\n        onVisibilityChange={this.handleVisibilityChange}\n        tooltipShown={tooltipShown}\n        placement=\"bottom\"\n        trigger=\"click\"\n        portalContainer={document.getElementsByClassName('main')[0]}\n        tooltip={(\n          <div>\n            <ModifierTile modifier=\"double-letter\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"double-word\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"triple-letter\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"triple-word\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"blank\" onClick={this.handleClick} />\n          </div>\n        )}\n      >\n        {children}\n      </Tooltip>\n    );\n  }\n}\n\nexport default WithModifierPopover;\n","import React from 'react';\nimport { resizeArray, scrabbleScore, isLetterAllowed } from '../../logic/util';\nimport WithModifierPopover from './WithModifierPopover';\n\nimport ScrabbleTile from '../ScrabbleTile/ScrabbleTile';\nimport './ScrabbleInputBox.css';\n\nclass ScrabbleInputBox extends React.Component {\n  static _clickOnElementByClass(className) {\n    const elements = document.getElementsByClassName(className);\n    if (elements.length !== 0) elements[0].click();\n  }\n\n  constructor(props) {\n    super(props);\n    this.textHiddenInput = React.createRef();\n    this.focus = this.focus.bind(this);\n    this.handleHiddenInputChange = this.handleHiddenInputChange.bind(this);\n    this.handleTileClick = this.handleTileClick.bind(this);\n    this.state = {\n      inFocus: false,\n    };\n  }\n\n  handleHiddenInputChange(e) {\n    const { language, word, onChange } = this.props;\n    const input = e.target.value;\n    const result = input.split('').map(letter => (isLetterAllowed(letter, language) ? letter : ''));\n    const modifiers = resizeArray(word.modifiers, result.length, null);\n    onChange({ value: result.join(''), modifiers });\n    this.constructor._clickOnElementByClass('hidden-input');\n  }\n\n  handleModifierChange(letterIndex, modifier) {\n    const { word, onChange } = this.props;\n    const modifiers = word.modifiers.slice();\n    modifiers[letterIndex] = modifier;\n    onChange({ value: word.value, modifiers });\n  }\n\n  handleTileClick() {\n    this.focus();\n  }\n\n  focus() {\n    this.textHiddenInput.current.focus();\n  }\n\n  render() {\n    const { language, word } = this.props;\n    const { inFocus } = this.state;\n    return (\n      <div role=\"textbox\" onClick={this.focus} onKeyDown={this.focus} className={`scrabble-input-box${word.value.length > 8 ? ' large' : ''}`}>\n        <input\n          ref={this.textHiddenInput}\n          onChange={this.handleHiddenInputChange}\n          value={word.value}\n          className=\"hidden-input\"\n          onBlur={() => this.setState({ inFocus: false })}\n          onFocus={() => this.setState({ inFocus: true })}\n          type=\"text\"\n          maxLength=\"15\"\n          autoComplete=\"off\"\n          autoCapitalize=\"off\"\n          spellCheck=\"false\"\n          autoCorrect=\"off\"\n        />\n        <div className={inFocus ? 'scrabble-tiles blinker' : 'scrabble-tiles'}>\n          {word.value.split('').map((c, i) => (\n            <WithModifierPopover\n              onChange={modifier => this.handleModifierChange(i, modifier)}\n              key={i}\n            >\n              <ScrabbleTile\n                onClick={this.handleTileClick}\n                letter={c}\n                score={scrabbleScore(c, [null], language)}\n                modifier={word.modifiers[i]}\n              />\n            </WithModifierPopover>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default ScrabbleInputBox;\n","import React from 'react';\nimport { scrabbleScore } from '../../logic/util';\nimport ScrabbleInputBox from '../ScrabbleInputBox/ScrabbleInputBox';\nimport ReactGA from 'react-ga';\n\nconst emptyWord = { value: '', modifiers: [], score: 0 };\n\nclass InGameControls extends React.Component {\n  \n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleEndTurn = this.handleEndTurn.bind(this);\n    this.handleEndGame = this.handleEndGame.bind(this);\n    this.handleAddWord = this.handleAddWord.bind(this);\n    this.handleBingo = this.handleBingo.bind(this);\n    this._scrollInputToTheMiddle = this._scrollInputToTheMiddle.bind(this);\n    this.input = React.createRef();\n    this.state = {\n      currentWord: emptyWord,\n    };\n  }\n\n  _scrollInputToTheMiddle() {\n    const { game, isMobile } = this.props;\n    const elements = document.getElementsByClassName('add-word');\n    const wordsOfFirstPlayerTurn = game.playersTurns[0][0].words;\n    if (isMobile && elements.length !== 0 && wordsOfFirstPlayerTurn.length !== 0) \n      { elements[0].scrollIntoView({ block: 'center' }) }\n  }\n\n  componentDidMount() {\n    if (this.input.current) this.input.current.focus();\n  }\n\n  onSetGame(game) {\n    const { onSetGame } = this.props;\n    onSetGame(game);\n    this.resetCurrentWord();\n  }\n\n  resetCurrentWord() {\n    this.setState({ currentWord: emptyWord });\n    if (this.input.current) this.input.current.focus();\n  }\n\n  handleChange(word) {\n    const { language } = this.props;\n    const currentWord = { ...word, score: scrabbleScore(word.value, word.modifiers, language) };\n    this.setState({ currentWord });\n  }\n\n  handleUndo() {\n    const { onUndo } = this.props;\n    onUndo();\n    this.resetCurrentWord();\n    this._scrollInputToTheMiddle();\n    ReactGA.event({\n      category: 'User',\n      action: 'Clicked Undo'\n    });\n  }\n\n  handleAddWord() {\n    const { currentWord } = this.state;\n    const { game } = this.props;\n    this.onSetGame(game.addWord(currentWord));\n    this._scrollInputToTheMiddle();\n\n    ReactGA.event({\n      category: 'User',\n      action: 'Clicked AddWord'\n    });\n  }\n\n  handleEndTurn(e) {\n    const { currentWord } = this.state;\n    let { game } = this.props;\n    e.preventDefault(); /* prevent form submission */\n    game = currentWord.value.length !== 0 ? game.addWord(currentWord) : game;\n    this.onSetGame(game.endTurn());\n    this._scrollInputToTheMiddle();\n\n    ReactGA.event({\n      category: 'User',\n      action: 'Clicked EndTurn'\n    });\n  }\n\n  handleBingo() {\n    const { game, onSetGame } = this.props;\n    onSetGame(game.setBingo(!game.getCurrentTurn().bingo));\n    this._scrollInputToTheMiddle();\n\n    ReactGA.event({\n      category: 'User',\n      action: 'Clicked Bingo'\n    });\n  }\n\n  handleEndGame() {\n    const { game, onSetGame } = this.props;\n    onSetGame(game.endGame());\n    this._scrollInputToTheMiddle();\n\n    ReactGA.event({\n      category: 'User',\n      action: 'Clicked End Game'\n    });\n  }\n\n  render() {\n    const { currentWord } = this.state;\n    const { game, language, undoDisabled } = this.props;\n    const endTurnButtonText = game.getCurrentTurn().isEmpty() && currentWord.value === '' ? 'PASS' : 'END TURN';\n    const isEndGameButtonDisabled = game.currentPlayerIndex !== 0 || currentWord.value !== '' || game.getCurrentTurn().score > 0 || game.playersTurns[game.getCurrentPlayerIndex()].length === 1;\n\n    const props = {\n      ref: this.input,\n      onChange: this.handleChange,\n      word: currentWord,\n      language,\n    };\n\n    return (\n      <form>\n        <ScrabbleInputBox {...props} />\n        <div className=\"buttons\">\n          <div className=\"in-game-controls\">\n            <div className=\"add-word-and-bingo-btns-container\">\n              <button onClick={this.handleAddWord} type=\"button\" className=\"btn word-submit-button add-word\" disabled={currentWord.value === ''}>+ ADD A WORD</button>\n              <input onChange={this.handleBingo} type=\"checkbox\" id=\"bingoToggle\" checked={game.getCurrentTurn().bingo} />\n              <label className=\"btn bingo\" htmlFor=\"bingoToggle\">\n                <div className=\"bingo-toggle\">BINGO</div>\n              </label>\n            </div>\n            <div className=\"submit-btn-container\">\n              <button onClick={this.handleEndTurn} type=\"submit\" className=\"btn pass-endturn-button\">{endTurnButtonText}</button>\n            </div>\n            <div className=\"undo-and-end-game-btns-container\">\n              <button onClick={this.handleUndo} type=\"button\" className=\"btn word-submit-button undo\" disabled={undoDisabled}>UNDO</button>\n              <button onClick={this.handleEndGame} type=\"button\" className=\"btn end-game\" disabled={isEndGameButtonDisabled}>END GAME</button>\n            </div>\n          </div>\n        </div>\n        <h3>How to use Scrabble Score Online:</h3>\n        <ul>\n          <li>\nTo add Premium Square scores to your word, click on a tile that you typed in an input box.\n          Choose desired option.\n          </li>\n          <li>Click ADD WORD to add word to your turn.</li>\n          <li>Click END TURN, to finish your turn.</li>\n          <li>Click BINGO if you played seven tiles on a turn.</li>\n          <li>If you made a mistake, use unlimited UNDO.</li>\n          <li>Click END GAME when you finished your game.</li>\n        </ul>\n      </form>\n    );\n  }\n}\nexport default InGameControls;\n","import React from 'react';\nimport { scrabbleScore } from '../../logic/util';\nimport ScrabbleInputBox from '../ScrabbleInputBox/ScrabbleInputBox';\n\nconst emptyWord = { value: '', modifiers: [], score: 0 };\n\nclass InGameOverControls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleLeftOvers = this.handleLeftOvers.bind(this);\n    this.input = React.createRef();\n    this.state = {\n      currentWord: emptyWord,\n    };\n  }\n\n  componentDidMount() {\n    if (this.input.current) this.input.current.focus();\n  }\n\n  resetCurrentWord() {\n    this.setState({ currentWord: emptyWord });\n    if (this.input.current) this.input.current.focus();\n  }\n\n  handleUndo() {\n    const { onUndo } = this.props;\n    onUndo();\n    this.resetCurrentWord();\n  }\n\n  handleChange(word) {\n    const { language } = this.props;\n    const currentWord = { ...word, score: -scrabbleScore(word.value, word.modifiers, language) };\n    this.setState({ currentWord });\n  }\n\n  handleLeftOvers(e) {\n    const { currentWord } = this.state;\n    const { onSetGame } = this.props;\n    let { game } = this.props;\n\n    e.preventDefault(); /* prevent form submission */\n\n    if (currentWord.value.length !== 0) game = game.addWord(currentWord);\n    game = game.endTurn();\n\n    if (game.currentPlayerIndex === 0) {\n      game = game.distributeLeftOversToReapers(game.getReapers(), game.getSumOfLeftovers());\n    }\n\n    onSetGame(game);\n    this.resetCurrentWord();\n  }\n\n  render() {\n    const { currentWord } = this.state;\n    const { game, language, undoDisabled } = this.props;\n    const submitButtonText = currentWord.value.length > 0 ? 'SUBMIT LEFTOVERS' : 'SUBMIT NO LEFTOVERS';\n    return (\n      <div>\n        {!game.areLeftOversSubmitted()\n          ? (\n            <form autoComplete=\"off\">\n              <ScrabbleInputBox\n                ref={this.input}\n                onChange={this.handleChange}\n                word={currentWord}\n                language={language}\n              />\n              <div className=\"buttons\">\n                <div className=\"in-game-controls\">\n                  <div className=\"undo-and-end-game-btns-container\">\n                    <button onClick={this.handleLeftOvers} type=\"submit\" className=\"btn pass-endturn-button\">{submitButtonText}</button>\n                  </div>\n                  <div className=\"submit-btn-container\">\n                    <button onClick={this.handleUndo} type=\"button\" className=\"btn word-submit-button undo\" disabled={undoDisabled}>UNDO</button>\n                  </div>\n                </div>\n              </div>\n            </form>\n          )\n          : (\n            <div className=\"buttons\">\n              <div className=\"in-game-controls\">\n                <div className=\"undo-and-end-game-btns-container\">\n                  <button onClick={this.handleUndo} type=\"button\" className=\"btn word-submit-button undo\" disabled={undoDisabled}>UNDO</button>\n                </div>\n              </div>\n            </div>\n          )\n        }\n        <h3>How to use Scrabble Score Online:</h3>\n        <ul>\n          <li>\n              Unplayed Letters: When the game ends, each player&apos;s score is reduced by the sum\n              of his or her unplayed letters. In addition, if a player has used all of his\n              or her letters, the sum of the other players&apos; unplayed letters is added to\n              that player&apos;s score.\n          </li>\n          <li>\n            Click SUBMIT NO LEFTOVERS if you finished your game without any tiles on your rack.\n          </li>\n          <li>\n            Click SUBMIT LEFTOVERS to submit tiles that are left on your rack when you&#32;\n            finished the game.\n          </li>\n          <li>If you made a mistake, use unlimited UNDO.</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default InGameOverControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Game from '../../logic/game';\nimport ScoreGrid from '../ScoreGrid/ScoreGrid';\nimport ScoreGridMobile from '../ScoreGrid/ScoreGridMobile';\nimport CallPlayerToAction from './CallPlayerToAction';\nimport InGameControls from './InGameControls';\nimport InGameOverControls from './InGameOverControls';\n\nclass ScoreKeeper extends React.Component {\n  static beforeUnload(e) {\n    e.preventDefault();\n    e.returnValue = '';\n  }\n\n  constructor(props) {\n    super(props);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleSetGame = this.handleSetGame.bind(this);\n    this.renderWinner = this.renderWinner.bind(this);\n    const { playerNames } = this.props;\n    this.state = {\n      game: Game.createNewGame(playerNames.length),\n      games: [],\n    };\n  }\n\n  componentDidMount() {\n    const { playerNames } = this.props;\n    let stateObj = {\n      playerNames: playerNames\n    };\n    window.history.pushState(stateObj, \"ScoreSheet\", \"/\") /*Pushing to browser's history*/\n\n    window.addEventListener('beforeunload', this.constructor.beforeUnload);\n  }\n\n  componentWillUnmount() {\n     window.removeEventListener('beforeunload', this.constructor.beforeUnload);  \n  }\n\n  handleSetGame(currentGame) {\n    const { game } = this.state;\n    let { games } = this.state;\n    games = [...games.slice(), game];\n    this.setState({ games, game: currentGame });\n  }\n\n  handleUndo() {\n    const { games } = this.state;\n    const previousGames = games.slice(0, -1);\n    const game = games[games.length - 1];\n    this.setState({ game, games: previousGames });\n\n  }\n\n  renderWinner() {\n    const { game } = this.state;\n    const { playerNames } = this.props;\n    const turnBeforeLeftOvers = game.leftOversTurnNumber - 1;\n    const winners = game.getWinners();\n    const winnersTie = game.getWinners(turnBeforeLeftOvers);\n    if (winners.length > 1) {\n      return winnersTie.map(winnerIndex => (winnersTie.length > 1\n        ? `${playerNames[winnerIndex]}: ${game.getTotalScore(winnerIndex, turnBeforeLeftOvers)} points`\n        : `${playerNames[winnerIndex]} won with ${game.getTotalScore(winnerIndex, turnBeforeLeftOvers)} points!`)).join(', ');\n    }\n    return `${playerNames[[...game.getWinners()]]} won with ${game.getTotalScore([...game.getWinners()])} points!`;\n  }\n\n  render() {\n    const { game, games } = this.state;\n    const { playerNames, language, isMobile } = this.props;\n\n    const controlProps = {\n      onSetGame: this.handleSetGame,\n      onUndo: this.handleUndo,\n      undoDisabled: games.length === 0,\n      isMobile,\n      game,\n      language,\n    };\n\n    const toDisplayCallPlayerToAction = () => {\n      if (!isMobile) {\n        return  <CallPlayerToAction game={game} playerNames={playerNames} isMobile={isMobile}/>\n      }\n    };\n\n    return (\n      <div className=\"score-keeper\">\n        <div className=\"container\">\n          <img id=\"logo\" src=\"logo.png\" alt=\"Scrabble score logo\" width=\"212px\" />\n          <h1 className=\"title\">Scrabble Score Sheet</h1>\n          {isMobile\n            ? <ScoreGridMobile playerNames={playerNames} game={game} language={language} />\n            : <ScoreGrid playerNames={playerNames} game={game} language={language} />\n          }\n          {!game.areLeftOversSubmitted()\n            ? toDisplayCallPlayerToAction()\n            : (\n              <div className=\"winner\">\n                <h1>{this.renderWinner()}</h1>\n              </div>\n            )\n              }\n          {!game.isGameOver()\n            ? <InGameControls {...controlProps} />\n            : <InGameOverControls {...controlProps} />\n              }\n        </div>\n      </div>\n    );\n  }\n}\n\nScoreKeeper.propTypes = {\n  playerNames: PropTypes.arrayOf(PropTypes.string),\n  language: PropTypes.string,\n};\n\nScoreKeeper.defaultProps = {\n  playerNames: ['Player 1', 'Player 2'],\n  language: 'en',\n};\n\nexport default ScoreKeeper;\n","import ReactGA from 'react-ga';\nimport React from 'react';\nimport GameSettings from '../GameSettings/GameSettings';\nimport ScoreKeeper from './ScoreKeeper';\nimport './ScrabbleScoreKeeper.css';\n\nclass ScrabbleScoreKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleGameStart = this.handleGameStart.bind(this);\n    this.handleWindowSizeChange = this.handleWindowSizeChange.bind(this);\n    this.handlePopState = this.handlePopState.bind(this);\n    this.state = {\n      playerNames: [],\n      language: '',\n      width: 10,\n    };\n  }\n\n  componentDidMount() {\n    const { playerNames } = this.state;\n    let stateObj = {\n      playerNames: playerNames\n    };\n    window.history.pushState(stateObj, \"GameSettingsPage\", \"/\") /*Pushing to browser's history*/\n    window.addEventListener('popstate', this.handlePopState); /*Listening to brower's back/front button click*/\n\n    ReactGA.initialize('UA-144533310-1');\n    ReactGA.pageview(window.location.pathname + window.location.search);\n    this.handleWindowSizeChange();\n  }\n\n  componentWillMount() {\n    window.addEventListener('resize', this.handleWindowSizeChange);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowSizeChange);\n    window.removeEventListener('popstate', this.handlePopState);\n  }\n\n  handlePopState(event) {\n   const stateObj = event.state;\n   this.setState({playerNames:stateObj.playerNames})\n  }\n\n  handleWindowSizeChange() {\n    this.setState({ width: window.innerWidth });\n  }\n\n  handleGameStart(playerNames, language) {\n    this.setState({ playerNames, language });\n  }\n\n  renderGame(isMobile) {\n    const { playerNames, language } = this.state;\n    return playerNames.length === 0\n      ? <GameSettings onGameStart={this.handleGameStart}/>\n      : <ScoreKeeper playerNames={playerNames} language={language} isMobile={isMobile} />;\n  }\n\n  render() {\n    const { width } = this.state;\n    const isMobile = width <= 815;\n    return (\n      <div className={`main ${isMobile ? 'mobile' : 'desktop'}`}>\n        {this.renderGame(isMobile)}\n      </div>\n    );\n  }\n}\n\nexport default ScrabbleScoreKeeper;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It\"s the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport { hydrate, render } from \"react-dom\";\nimport './index.css';\nimport ScrabbleScoreKeeper from './components/ScrabbleScoreKeeper/ScrabbleScoreKeeper';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst rootElement = document.getElementsByClassName('content')[0];\nif (rootElement.hasChildNodes()) {\n  hydrate(<ScrabbleScoreKeeper/>, rootElement);\n} else {\n  render(<ScrabbleScoreKeeper/>, rootElement);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}