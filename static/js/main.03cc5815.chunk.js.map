{"version":3,"sources":["logic/scoreLists.js","logic/util.js","components/GameSettings/GameSettings.js","logic/game.js","components/ScrabbleTile/ScrabbleTile.js","components/ScoreGrid/WordInTiles.js","components/ScoreGrid/ScoreGridCell.js","components/ScoreGrid/ScoreGrid.js","components/ScrabbleScoreKeeper/CallPlayerToAction.js","components/ScoreGrid/ScoreGridMobile.js","components/Tooltip/Tooltip.js","components/ScrabbleInputBox/ModifierTile.js","components/ScrabbleInputBox/WithModifierPopover.js","components/ScrabbleInputBox/ScrabbleInputBox.js","components/ScrabbleScoreKeeper/InGameControls.js","components/ScrabbleScoreKeeper/InGameOverControls.js","components/ScrabbleScoreKeeper/ScoreKeeper.js","components/ScrabbleScoreKeeper/App.js","serviceWorker.js","index.js"],"names":["scoreListsMap","en","language","scores","a","e","i","o","u","l","n","r","s","t","d","g","b","c","m","p","f","h","v","w","y","k","j","x","q","z","fr","ru","о","а","е","и","н","р","с","т","в","д","к","л","п","у","м","б","г","ь","я","ё","ы","й","з","ж","х","ц","ч","ш","э","ю","ф","щ","ъ","resizeArray","array","desiredLength","defaultValue","output","slice","length","push","__toggleSingleModifier","oldModifiers","modifier","scrabbleScore","word","modifiers","result","split","forEach","letter","score","toLowerCase","isStaticBuild","navigator","userAgent","logEvent","eventName","eventData","amplitude","getInstance","error","console","log","scrollToTop","document","getElementsByTagName","scrollIntoView","scrollToMiddle","getElementsByClassName","block","GameSettings","props","handleChangeOfName","bind","handleChangeOfLanguage","handleGameStart","state","numberOfPlayers","playerNames","isTagDisabled","this","setState","target","value","onGameStart","preventDefault","map","name","className","id","onChange","Array","_","key","type","placeholder","disabled","onClick","React","Component","Turn","words","bingo","game","isEmpty","getCurrentTurn","obj","Game","playersTurns","currentPlayerIndex","leftOversTurnNumber","currentTurn","turn","_setTurn","getCurrentTurnNumber","newGame","empty","newPlayerIndex","isGameOver","getCurrentPlayer","history","playerIndex","move","reaperIndexes","total","Math","abs","reapers","totalLeftOverScore","reaperIndex","upToMove","totalScores","getTotalScore","indexesOf","max","turnNumber","playerCopy","player","totalScore","totals","getRunningTotals","undefined","fromPlain","ScrabbleTile","modifierClass","join","role","onKeyDown","toUpperCase","WordInTiles","letterTiles","ScoreGridCell","isMoveInGameOver","rows","rowSpan","colSpan","isPassed","renderPassed","renderNormal","ScoreGrid","align","CallPlayerToAction","isMobile","playerName","callPlayerToAction","ScoreGridMobile","scope","moveRowText","areLeftOversSubmitted","isComplete","turnIndex","isCurrentPlayersTurn","Tooltip","children","tooltip","hideArrow","arrowRef","tooltipRef","getArrowProps","getTooltipProps","placement","ref","getTriggerProps","triggerRef","ModifierTile","onTouchEnd","tileText","WithModifierPopover","handleClick","handleVisibilityChange","tooltipShown","newModifiers","modifiersA","filter","mod","modifiersB","toggleModifiers","stopPropagation","argument","onVisibilityChange","trigger","portalContainer","ScrabbleInputBox","textHiddenInput","createRef","focus","handleHiddenInputChange","handleTileClick","inFocus","elements","click","substring","isLetterAllowed","constructor","_clickOnElementByClass","letterIndex","current","keyCode","handleArrowClick","onBlur","onFocus","maxLength","autoComplete","autoCapitalize","spellCheck","autoCorrect","handleModifierChange","emptyWord","noSleep","NoSleep","InGameControls","handleChange","handleUndo","handleEndTurn","handleEndGame","handleAddWord","handleBingo","_scroll","input","currentWord","where","enable","onSetGame","resetCurrentWord","onUndo","addWord","endTurn","setBingo","endGame","disable","turns","undoDisabled","isCurrentWordEmpty","endTurnButtonText","isEndGameDisabled","getCurrentPlayerIndex","isBingoDisabled","some","isModifierChosen","isInstructionShown","isFirstTurn","isEndTurnDisabled","onSubmit","checked","htmlFor","InGameOverControls","handleLeftOvers","distributeLeftOversToReapers","getReapers","getSumOfLeftovers","submitButtonText","href","ScoreKeeper","handleSetGame","renderWinner","restoredState","JSON","parse","window","localStorage","getItem","games","createNewGame","currentGame","newState","setItem","stringify","previousGames","turnBeforeLeftOvers","winners","getWinners","winnersTie","winnerIndex","controlProps","src","alt","toDisplayCallPlayerToAction","App","handleWindowSizeChange","handlePopState","width","pushState","addEventListener","ReactGA","initialize","pageview","location","pathname","search","maybeResetLocalStorage","removeEventListener","event","stateObj","innerWidth","renderGame","confirm","removeItem","Boolean","hostname","match","init","rootElement","hasChildNodes","hydrate","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03cc5815.chunk.js","sourcesContent":["export const scoreListsMap = {\n  en: {\n    language: 'English',\n    scores: {\n      a: 1,\n      e: 1,\n      i: 1,\n      o: 1,\n      u: 1,\n      l: 1,\n      n: 1,\n      r: 1,\n      s: 1,\n\t\t\tt: 1,\n      d: 2,\n      g: 2,\n      b: 3,\n      c: 3,\n      m: 3,\n      p: 3,\n      f: 4,\n      h: 4,\n      v: 4,\n      w: 4,\n      y: 4,\n\t\t\tk: 5,\n      j: 8,\n      x: 8,\n      q: 10,\n      z: 10,\n    },\n  },\n  fr: {\n    language: 'French',\n    scores: {\n      e: 1,\n      a: 1,\n      i: 1,\n      n: 1,\n      o: 1,\n      r: 1,\n      s: 1,\n      t: 1,\n      u: 1,\n      l: 1,\n\t\t\td: 2,\n      m: 2,\n      g: 2,\n      b: 3,\n      c: 3,\n      p: 3,\n      f: 4,\n      h: 4,\n      v: 4,\n      j: 8,\n      q: 8,\n      k: 10,\n\t\t\tw: 10,\n      x: 10,\n      y: 10,\n      z: 10,\n    },\n  },\n  ru: {\n    language: 'Russian',\n    scores: {\n      о: 1,\n      а: 1,\n      е: 1,\n      и: 1,\n      н: 1,\n      р: 1,\n      с: 1,\n      т: 1,\n      в: 1,\n\t\t\tд: 2,\n      к: 2,\n      л: 2,\n      п: 2,\n      у: 2,\n      м: 2,\n      б: 3,\n      г: 3,\n      ь: 3,\n      я: 3,\n      ё: 3,\n      ы: 4,\n      й: 4,\n\t\t\tз: 5,\n      ж: 5,\n      х: 5,\n      ц: 5,\n      ч: 5,\n      ш: 8,\n      э: 8,\n      ю: 8,\n      ф: 10,\n      щ: 10,\n      ъ: 10,\n    },\n  },\n};\n","import amplitude from 'amplitude-js';\nimport { scoreListsMap } from './scoreLists';\n\nexport function resizeArray(array, desiredLength, defaultValue) {\n  const output = array.slice(0, desiredLength);\n  while (output.length < desiredLength) output.push(defaultValue);\n  return output;\n}\n\nexport function indexesOf(array, value) {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === value) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfunction __toggleSingleModifier(oldModifiers, modifier) {\n  if (oldModifiers.length === 0)\n    return [modifier];\n  return (oldModifiers[0] === modifier) ? [] : [modifier];\n}\n\nexport function toggleModifiers(oldModifiers, modifier) {\n  let modifiersA = oldModifiers.filter(mod => mod === 'blank');\n  let modifiersB = oldModifiers.filter(mod => mod !== 'blank');\n\n  if (modifier === 'blank')\n    modifiersA = __toggleSingleModifier(modifiersA, modifier);\n  else\n    modifiersB = __toggleSingleModifier(modifiersB, modifier);\n\n  return [...modifiersA, ...modifiersB];\n}\n\nexport function isLetterAllowed(letter, language) {\n  return letter.toLowerCase() in scoreListsMap[language].scores;\n}\n\nexport function scrabbleScore(word, modifiers, language) {\n  let result = 0;\n\n  word.split('').forEach((letter, i) => {\n    let score = scoreListsMap[language].scores[letter.toLowerCase()];\n    for (let j=0; j < modifiers[i].length; j++) {\n      // eslint-disable-next-line\n      switch (modifiers[i][j]) {\n        case 'blank': score *= 0; break;\n        case 'double-letter': score *= 2; break;\n        case 'triple-letter': score *= 3; break;\n      }\n    }\n    result += score;\n  })\n  \n  modifiers.forEach((modifier) => {\n    for (let j=0; j < modifier.length; j++) {\n    // eslint-disable-next-line\n      switch (modifier[j]) {\n        case 'double-word': result *= 2; break;\n        case 'triple-word': result *= 3; break;\n      }\n    }\n  });\n  return result;\n}\n\nexport function logEventInit() {\n  amplitude.getInstance().init('908142045794995ec39e6025a04bfdb4');\n}\n\nexport function isStaticBuild() {\n  return navigator.userAgent === 'ReactSnap';\n}\n\nexport function isInProduction() {\n  return process.env.NODE_ENV === 'production'; // eslint-disable-line no-use-before-define\n}\n\nexport function logEvent(eventName, eventData) {\n  if (isStaticBuild() || !isInProduction())\n    return;\n\n  try {\n    amplitude.getInstance().logEvent(eventName, eventData)\n  } catch(error) {\n    console.log(`Something went wrong when logging an event. ${error}.`)\n  }\n}\n\nexport function scrollToTop() {\n  const bodyElement = document.getElementsByTagName('body');\n  bodyElement[0].scrollIntoView(true)\n}\n\nexport function scrollToMiddle() {\n  const inputBoxElement = document.getElementsByClassName('add-word');\n  inputBoxElement[0].scrollIntoView({ block: 'center' })\n}\n\nexport default null;\n","import React from 'react';\nimport './GameSettings.css';\nimport { logEvent, isStaticBuild } from '../../logic/util';\n\n\nclass GameSettings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChangeOfName = this.handleChangeOfName.bind(this);\n    this.handleChangeOfLanguage = this.handleChangeOfLanguage.bind(this);\n    this.handleGameStart = this.handleGameStart.bind(this);\n\n    this.state = {\n      numberOfPlayers: 4,\n      playerNames: ['', ''],\n      language: 'en',\n      isTagDisabled: true,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({isTagDisabled: isStaticBuild()});\n  }\n\n  handleChangeOfName(i, e) {\n    let { playerNames } = this.state;\n    playerNames = playerNames.slice();\n    playerNames[i] = e.target.value;\n    this.setState({ playerNames });\n  }\n\n  handleChangeOfLanguage(e) {\n    this.setState({ language: e.target.value });\n  }\n\n  handleGameStart(e) {\n    const { playerNames, language } = this.state;\n    const { onGameStart } = this.props;\n    e.preventDefault(); /* prevent form submission */\n    onGameStart(playerNames.map((name, i) => (name || `Player ${i + 1}`)), language);\n\n    logEvent('start-game', {playerNames: playerNames, language: language});    \n  }\n\n  render() {\n    const { language, numberOfPlayers, playerNames, isTagDisabled } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-2 offset-sm-10\">\n            <select className=\"custom-select\" id=\"language-select\" value={language} onChange={this.handleChangeOfLanguage}>\n              <option value=\"en\">English</option>\n              <option value=\"ru\">Russian</option>\n              <option value=\"fr\">French</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <div className=\"logo\"></div>\n            <span className=\"description\">\n              <p>\n                 Hello and welcome to Scrabble Score Online. This is an easy-to-use\n                 scrabble score calculator that replaces pen-and-paper for keeping track of Scrabble scores.\n                 Enjoy the game with your friends and family while this scrabble score sheet will do math for you.\n              </p>\n              <p>\n                 Simply fill in the players’ names in order that they will\n                 take turns and press the “START” button.\n              </p>\n              <p>Relax and enjoy your game, now you don’t need to do any math!</p>\n            </span>\n          </div>\n        </div>\n        <form>\n          <div className=\"player-names-choice-container\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  {[...Array(numberOfPlayers)].map((_, i) => (\n                    <input\n                      onChange={e => this.handleChangeOfName(i, e)}\n                      id={`player-name-input-${i}`}\n                      key={i}\n                      type=\"text\"\n                      className={playerNames[i] && playerNames[i].length > 0 ? 'form-control player-name filled' : 'form-control player-name'}\n                      placeholder={`Player ${i + 1}`}\n                      disabled={isTagDisabled}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"start-btn-container\">\n            <button className=\"btn start\" type=\"button\" onClick={this.handleGameStart} disabled={isTagDisabled}>START</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\n\nexport default GameSettings;\n","import { resizeArray, indexesOf } from './util';\n\nclass Turn {\n  /* DONE Add test for passed display in the scoregrid */\n  /* DONE once test are added, refactor to take out the passed variable from Turn */\n  constructor(words, bingo) {\n    this.words = words;\n    this.bingo = bingo;\n  }\n\n  static empty() {\n    return new Turn([], false);\n  }\n\n  static fromPlain(obj) {\n    return new Turn(obj.words, obj.bingo)\n  }\n\n  isEmpty() {\n    return this.words.length === 0;\n  }\n\n  isPassed(game) {\n    return this.isEmpty() && this !== game.getCurrentTurn();\n  }\n\n  isComplete(game) {\n    return this !== game.getCurrentTurn()\n  }\n\n  get score() {\n    let result = 0;\n    for (let i = 0; i < this.words.length; i++) {\n      result += this.words[i].score;\n    }\n\n    if (this.bingo) {\n      result += 50;\n    }\n\n    return result;\n  }\n}\n\nexport default class Game {\n  constructor(playersTurns, currentPlayerIndex, leftOversTurnNumber) {\n    this.currentPlayerIndex = currentPlayerIndex;\n    this.playersTurns = playersTurns;\n    this.leftOversTurnNumber = leftOversTurnNumber;\n  }\n\n  static createNewGame(numberOfPlayers) {\n    const turn = Turn.empty();\n    const playersTurns = resizeArray([[turn]], numberOfPlayers, []);\n    return new Game(playersTurns, 0, null);\n  }\n\n  static fromPlain(obj) {\n    const turns = obj.playersTurns.map(player => player.map(turn => Turn.fromPlain(turn)));\n    return new Game(turns, obj.currentPlayerIndex, obj.leftOversTurnNumber);\n  }\n\n  addWord(word) {\n    const currentTurn = this.getCurrentTurn();\n    const turn = new Turn([...currentTurn.words, word], currentTurn.bingo);\n    return this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), turn);\n  }\n\n  endTurn() {\n    let newGame = this;\n    if (this.getCurrentTurn().isEmpty()) {\n      newGame = this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), Turn.empty());\n    }\n    const newPlayerIndex = (this.currentPlayerIndex + 1) % this.playersTurns.length;\n    const players = this.isGameOver() && (this.getCurrentPlayer() === this.playersTurns[this.playersTurns.length - 1]) ? newGame.playersTurns\n      : newGame.playersTurns.map((history, playerIndex) => (playerIndex === newPlayerIndex ? [...history, Turn.empty()] : history));\n    return new Game(players, newPlayerIndex, this.leftOversTurnNumber);\n  }\n\n  setBingo(value) {\n    const turn = new Turn(this.getCurrentTurn().words, value);\n    return this._setTurn(this.currentPlayerIndex, this.getCurrentTurnNumber(), turn);\n  }\n\n  endGame() {\n    return new Game(this.playersTurns, this.currentPlayerIndex, this.getCurrentTurnNumber());\n  }\n\n  isGameOver() {\n    return this.leftOversTurnNumber !== null;\n  }\n\n  areLeftOversSubmitted() {\n    if (this.isGameOver() && this.playersTurns[this.playersTurns.length - 1][this.leftOversTurnNumber] && this.currentPlayerIndex === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  isMoveInGameOver(move) {\n    return this.isGameOver() && this.leftOversTurnNumber === move\n  }\n\n  getReapers() {\n    const reaperIndexes = [];\n    for (let i = 0; i < this.playersTurns.length; i++) {\n      if (this.playersTurns[i][this.leftOversTurnNumber].isEmpty()) {\n        reaperIndexes.push(i);\n      }\n    }\n    return reaperIndexes;\n  }\n\n  getSumOfLeftovers() {\n    let total = 0;\n    for (let i = 0; i < this.playersTurns.length; i++) {\n      total += Math.abs(this.playersTurns[i][this.leftOversTurnNumber].score);\n    }\n    return total;\n  }\n\n  distributeLeftOversToReapers(reapers, totalLeftOverScore) {\n    let game = this;\n    reapers.forEach((reaperIndex) => {\n      const turn = new Turn([{ value: '', modifiers: [], score: totalLeftOverScore }], false);\n      game = game._setTurn(reaperIndex, this.leftOversTurnNumber, turn);\n    });\n    return game;\n  }\n\n  getWinners(upToMove) {\n    const totalScores = this.playersTurns.map((_, i) => this.getTotalScore(i, upToMove));\n    return indexesOf(totalScores, Math.max(...totalScores));\n  }\n\n  _setTurn(playerIndex, turnNumber, turn) {\n    const playerCopy = this.playersTurns[playerIndex].slice();\n    playerCopy[turnNumber] = turn;\n    const newPlayers = this.playersTurns.map((player, i) => (i === playerIndex ? playerCopy : player));\n    return new Game(newPlayers, this.currentPlayerIndex, this.leftOversTurnNumber);\n  }\n\n  getCurrentPlayer() {\n    return this.playersTurns[this.currentPlayerIndex];\n  }\n\n  getCurrentTurn() {\n    return this.getCurrentPlayer().slice(-1)[0];\n  }\n\n  getCurrentTurnNumber() {\n    return this.playersTurns[0].length - 1;\n  }\n\n  getCurrentPlayerIndex() {\n    return this.currentPlayerIndex;\n  }\n\n  getRunningTotals(playerIndex) {\n    const player = this.playersTurns[playerIndex];\n    let result = [];\n    let totalScore = 0;\n    for (let i = 0; i < player.length; i++) {\n      totalScore += player[i].score\n      result.push(totalScore);\n    }\n    return result;\n  }\n  \n  getTotalScore(playerIndex, upToMove) {\n    let totals = this.getRunningTotals(playerIndex);\n    if (upToMove !== undefined)\n      return totals[upToMove];\n    return totals.length === 0 ? 0 : totals[totals.length - 1];\n  }\n}\n","import React from 'react';\nimport './ScrabbleTile.css';\n\nfunction ScrabbleTile(props) {\n  const {\n    modifier, letter, score, onClick,\n  } = props;\n  const modifierClass = modifier === [] ? '' : modifier.join(' ');\n  return (\n    <span className={`scrabble-letter ${modifierClass}`} role=\"button\" onClick={onClick} onKeyDown={onClick}>\n      {modifier.length !== 0\n        ? <span className=\"tile-modifier\"></span>\n        : null\n      }\n      <span className=\"letter\">{letter.toUpperCase()}</span>\n      <span className=\"score\">{score}</span>\n    </span>\n  );\n}\nexport default ScrabbleTile;\n","import React from 'react';\nimport { scrabbleScore } from '../../logic/util';\nimport ScrabbleTile from '../ScrabbleTile/ScrabbleTile';\n\nclass WordInTiles extends React.Component {\n  render() {\n    const { word, language } = this.props;\n    const letterTiles = word.value.split('').map((letter, i) => {\n      const tile = (\n        <ScrabbleTile\n          key={i}\n          letter={letter}\n          modifier={word.modifiers[i]}\n          score={scrabbleScore(letter, [[]], language)}\n        />\n      );\n      return tile;\n    });\n    return <div>{letterTiles}</div>;\n  }\n}\n\nexport default WordInTiles;\n","import React from 'react';\nimport WordInTiles from './WordInTiles';\n\nclass ScoreGridCell extends React.Component {\n  renderPassed() {\n    const { game, move } = this.props;\n    return (\n       <tr>\n        <td>\n          { game.isMoveInGameOver(move) ? 'NO LEFTOVERS' : 'PASS' }\n        </td>\n      </tr> \n    )\n  }\n\n  renderNormal() {\n    const { turn, language } = this.props;\n    const rows = turn.words.map((word, i) => (\n\n      <tr key={`row-word-${i}`} className=\"word-row\">\n        <td className=\"word-cell\"><WordInTiles word={word} language={language} /></td>\n        {i === 0\n          ? (\n            <td rowSpan={`${turn.bingo ? turn.words.length + 1 : turn.words.length}`} className=\"score-cell\">\n              <span className=\"score-box\">\n                {turn.score}\n              </span>\n            </td>\n          )\n          : null}\n      </tr>\n    ));\n\n    if (turn.bingo) {\n      rows.push(\n        <tr key=\"bingo\">\n          <td colSpan=\"2\">BINGO!</td>\n        </tr>,\n      );\n    }\n    return rows;\n  }\n\n  render() {\n    const { turn, game } = this.props;\n    return (\n      <table className=\"score-grid-cell\">\n        <tbody>\n          {turn.isPassed(game) ? this.renderPassed() : this.renderNormal()}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default ScoreGridCell;\n","import React from 'react';\nimport ScoreGridCell from './ScoreGridCell';\nimport './ScoreGrid.css';\n\nfunction ScoreGrid(props) {\n  const { playerNames, game, language } = props;\n  const getTurnClass = (turn, currentTurn) => (\n    turn === currentTurn ? 'player-turn active' : 'player-turn'\n  );\n\n  return (\n    <table className=\"table table-bordered score-grid-table\" align=\"center\">\n      <thead>\n        <tr className=\"thead-rows\">\n          <th className=\"move-header\">Move</th>\n          {playerNames.map((player, i) => (\n            <th\n              key={i}\n              className=\"player-header\"\n            >\n              {player}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody className=\"tbody-rows\">\n        {[...Array(game.getCurrentTurnNumber() + 1)].map((_, i) => (\n          <tr className=\"turn-row\" key={i}>\n            <th className=\"move-number\">{i + 1}</th>\n            {game.playersTurns.map((player, j) => (\n              <td key={j} className={getTurnClass(player[i], game.getCurrentTurn())}>\n                {player[i] ? <ScoreGridCell turn={player[i]} move={i} language={language} game={game} />\n                  : null}\n              </td>\n            ))}\n          </tr>\n        ))}\n        <tr className=\"total-score\">\n          <th className=\"move\">TOTAL</th>\n          {playerNames.map((_, i) => <td key={i}>{game.getTotalScore(i)}</td>)}\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default ScoreGrid;\n","import React from 'react';\n\nfunction CallPlayerToAction(props) {\n  const { isMobile, game, playerNames } = props;\n  \n  function callPlayerToAction() {\n    const playerName = playerNames[game.currentPlayerIndex];\n    const msgs = {\n      'mobile-ingame':    `Submit a word or end turn`,\n      'mobile-gameover':  `Submit your leftovers`,\n      'desktop-ingame':   `${playerName}, submit a word or end turn`,\n      'desktop-gameover': `${playerName}, submit your leftovers`,\n    };\n    return msgs[`${isMobile ? 'mobile' : 'desktop'}-${game.isGameOver() ? 'gameover':'ingame'}`];\n  }\n\n  return (\n    <div className=\"row justify-content-center\">\n      <span className=\"call-player-to-action\">{callPlayerToAction()}</span>\n    </div>\n  );\n}\n\nexport default CallPlayerToAction;\n","import React from 'react';\nimport ScoreGridCell from './ScoreGridCell';\nimport CallPlayerToAction from '../ScrabbleScoreKeeper/CallPlayerToAction';\nimport './ScoreGrid.css';\n\nclass ScoreGridMobile extends React.Component {\n  moveRowText(i) {\n    const { game } = this.props;\n    return game.isMoveInGameOver(i) ? 'Leftovers Accounting' : `Move ${i + 1}`;\n  }\n\n  render() {\n    const { playerNames, game, language } = this.props;\n    const totalScores = [...Array(playerNames.length)].map((_, j) => game.getRunningTotals(j));\n    const toDisplayTotals = (turn) => {\n      if (!game.areLeftOversSubmitted()) {\n        return turn.isComplete(game);\n      }\n      return true;\n    };\n\n    const isCurrentPlayersTurn = (player, turnIndex) => player === game.getCurrentPlayer()\n                                                      && player[turnIndex].isEmpty()\n                                                      && !player[turnIndex].isPassed(game)\n                                                      && !player[turnIndex].bingo;\n    return (\n      <table className=\"table table-bordered score-grid-table\">\n        <thead>\n          <tr className=\"thead-rows\">\n            <th className=\"playerNames\" scope=\"col\">Names<br />(Total)</th>\n            <th className=\"playerTurn\" scope=\"col\">Player Turn</th>\n          </tr>\n        </thead>\n        <tbody key=\"tbody\" className=\"tbody-rows\">\n          {game.getCurrentPlayer().map((_, i) => {\n            const moveRow = (\n              <tr key={`moverow${i}`} className=\"move-row\">\n                <td colSpan=\"2\">\n                  {this.moveRowText(i)}\n                </td>\n              </tr>\n            );\n            const playerRows = game.playersTurns.map((player, j) => (\n              player[i]\n                ? (\n                  <tr key={`move${i}_player${j}`} className=\"player-move-row\">\n                    <td className=\"player-name\">\n                      {playerNames[j]}\n                      <br />\n                      {toDisplayTotals(player[i]) ? totalScores[j][i] : null}\n                    </td>\n\n                    <td className=\"player-turn\">\n                      {isCurrentPlayersTurn(player, i)\n                        ? <table className=\"score-grid-cell\"><tbody><tr><td>\n                            <CallPlayerToAction game={game} playerNames={playerNames} isMobile />\n                          </td></tr></tbody></table>\n                        : <ScoreGridCell turn={player[i]} language={language} game={game} />\n                      }\n\n                    </td>\n                  </tr>\n                )\n                : null\n            ));\n            return [moveRow, playerRows];\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\nexport default ScoreGridMobile;\n","import React from 'react';\nimport TooltipTrigger from 'react-popper-tooltip';\nimport 'react-popper-tooltip/dist/styles.css';\nimport './Tooltip.css';\n\nconst Tooltip = ({\n  children, tooltip, hideArrow, ...props\n}) => (\n  <TooltipTrigger\n    {...props}\n    tooltip={({\n      arrowRef,\n      tooltipRef,\n      getArrowProps,\n      getTooltipProps,\n      placement,\n\n    }) => (\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          className: 'tooltip-container',\n        })}\n      >\n        {!hideArrow && (\n          <div\n            {...getArrowProps({\n              ref: arrowRef,\n              className: 'tooltip-arrow',\n              'data-placement': placement,\n            })}\n          />\n        )}\n        {tooltip}\n      </div>\n    )}\n  >\n    {({ getTriggerProps, triggerRef }) => (\n      <span\n        {...getTriggerProps({\n          ref: triggerRef,\n          className: 'trigger',\n        })}\n      >\n        {children}\n      </span>\n    )}\n  </TooltipTrigger>\n);\n\nexport default Tooltip;\n","import React from 'react';\n\nclass ModifierTile extends React.Component {\n  tileText() {\n    const { modifier } = this.props;\n    switch (modifier) {\n      case 'double-letter': return 'Double letter score';\n      case 'double-word': return 'Double word score';\n      case 'triple-letter': return 'Triple letter score';\n      case 'triple-word': return 'Triple word score';\n      case 'blank': return 'Blank tile';\n      default: return null;\n    }\n  }\n\n  render() {\n    const { onClick, modifier } = this.props;\n    return (\n      <span\n        role=\"button\"\n        onClick={e => onClick(modifier, e)}\n        onKeyDown={e => onClick(modifier, e)}\n        onTouchEnd={e => onClick(modifier, e)}\n        className={`modifier ${modifier}`}\n      >\n        {this.tileText()}\n      </span>\n    );\n  }\n}\n\nexport default ModifierTile;\n","import React from 'react';\nimport Tooltip from '../Tooltip/Tooltip';\nimport ModifierTile from './ModifierTile';\nimport { toggleModifiers } from '../../logic/util';\n\nclass WithModifierPopover extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n    this.state = {\n      modifiers: [],\n      tooltipShown: false,\n    };\n  }\n\n  handleClick(modifier, e) {\n    const { modifiers } = this.state;\n    const { onChange } = this.props;\n    const newModifiers = toggleModifiers(modifiers, modifier);\n    this.setState({ modifiers: newModifiers, tooltipShown: false });\n    onChange(newModifiers);\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  handleVisibilityChange(argument) {\n    this.setState({ tooltipShown: argument });\n  }\n\n  render() {\n    const { tooltipShown } = this.state;\n    const { children } = this.props;\n    return (\n      <Tooltip\n        onVisibilityChange={this.handleVisibilityChange}\n        tooltipShown={tooltipShown}\n        placement=\"bottom\"\n        trigger=\"click\"\n        portalContainer={document.getElementsByClassName('scrabble-input-box')[0]}\n        tooltip={(\n          <div>\n            <ModifierTile modifier=\"double-letter\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"double-word\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"triple-letter\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"triple-word\" onClick={this.handleClick} />\n            <ModifierTile modifier=\"blank\" onClick={this.handleClick} />\n          </div>\n        )}\n      >\n        {children}\n      </Tooltip>\n    );\n  }\n}\n\nexport default WithModifierPopover;\n","import React from 'react';\nimport { resizeArray, scrabbleScore, isLetterAllowed, logEvent } from '../../logic/util';\nimport WithModifierPopover from './WithModifierPopover';\nimport ScrabbleTile from '../ScrabbleTile/ScrabbleTile';\nimport './ScrabbleInputBox.css';\n\nclass ScrabbleInputBox extends React.Component {\n  static _clickOnElementByClass(className) {\n    const elements = document.getElementsByClassName(className);\n    if (elements.length !== 0) elements[0].click();\n  }\n\n  constructor(props) {\n    super(props);\n    this.textHiddenInput = React.createRef();\n    this.focus = this.focus.bind(this);\n    this.handleHiddenInputChange = this.handleHiddenInputChange.bind(this);\n    this.handleTileClick = this.handleTileClick.bind(this);\n    this.state = {\n      inFocus: false,\n    };\n  }\n\n  handleHiddenInputChange(e) {\n    const { language, word, onChange } = this.props;\n    const input = e.target.value.substring(0,15); /* maxLength does not always work on Android */\n    const result = input.split('').map(letter => (isLetterAllowed(letter, language) ? letter : ''));\n    const modifiers = resizeArray(word.modifiers, result.length, []);\n    onChange({ value: result.join(''), modifiers });\n    this.constructor._clickOnElementByClass('hidden-input');\n  }\n\n  handleModifierChange(letterIndex, modifier) {\n    const { word, onChange } = this.props;\n    const modifiers = word.modifiers.slice();\n    modifiers[letterIndex] = modifier;\n    onChange({ value: word.value, modifiers });\n\n    logEvent('modifier-added', {value: word.value, modifiers});\n  }\n\n  handleTileClick() {\n    this.focus();\n  }\n\n  focus() {\n    this.textHiddenInput.current.focus();\n  }\n\n  render() {\n    const { language, word } = this.props;\n    const { inFocus } = this.state;\n\n    function handleArrowClick(e) {\n      if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40) {\n        e.preventDefault()\n      }\n    }\n\n    return (\n      <div role=\"textbox\" onClick={this.focus} onKeyDown={this.focus} className={`scrabble-input-box${word.value.length > 8 ? ' large' : ''}`}>\n        <input\n          ref={this.textHiddenInput}\n          onChange={this.handleHiddenInputChange}\n          onKeyDown={(e) => handleArrowClick(e)}\n          value={word.value}\n          className=\"hidden-input\"\n          onBlur={() => this.setState({ inFocus: false })}\n          onFocus={() => this.setState({ inFocus: true })}\n          type=\"text\"\n          maxLength=\"15\"\n          autoComplete=\"off\"\n          autoCapitalize=\"off\"\n          spellCheck=\"false\"\n          autoCorrect=\"off\"\n        />\n        <div className={inFocus ? 'scrabble-tiles blinker' : 'scrabble-tiles'}>\n          {word.value.split('').map((letter, letterIndex) => (\n            <WithModifierPopover\n              onChange={modifier => this.handleModifierChange(letterIndex, modifier)}\n              key={letterIndex}\n            >\n              <ScrabbleTile\n                onClick={this.handleTileClick}\n                letter={letter}\n                score={scrabbleScore(letter, [[]], language)}\n                modifier={word.modifiers[letterIndex]}\n              />\n            </WithModifierPopover>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default ScrabbleInputBox;\n","import React from 'react';\nimport { scrabbleScore, logEvent, scrollToTop,  scrollToMiddle } from '../../logic/util';\nimport ScrabbleInputBox from '../ScrabbleInputBox/ScrabbleInputBox';\nimport NoSleep from 'nosleep.js';\n\nconst emptyWord = { value: '', modifiers: [], score: 0 };\nconst noSleep = new NoSleep();\n\nclass InGameControls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleEndTurn = this.handleEndTurn.bind(this);\n    this.handleEndGame = this.handleEndGame.bind(this);\n    this.handleAddWord = this.handleAddWord.bind(this);\n    this.handleBingo = this.handleBingo.bind(this);\n    this._scroll = this._scroll.bind(this);\n    this.input = React.createRef();\n    this.state = {\n      currentWord: emptyWord,\n    };\n  }\n\n  _scroll(where='middle') {\n    const { isMobile } = this.props;\n    if (process.env.NODE_ENV !== 'test')\n      noSleep.enable() //Enable must be wrapped in event handler\n    \n    if (!isMobile)\n      return;\n\n    if (where === 'middle')\n      scrollToMiddle();\n    else\n      scrollToTop();\n  }\n\n  componentDidMount() {\n    if (this.input.current)\n      this.input.current.focus();\n    this._scroll('top');\n  }\n\n  onSetGame(game) {\n    const { onSetGame } = this.props;\n    onSetGame(game);\n    this.resetCurrentWord();\n  }\n\n  resetCurrentWord() {\n    this.setState({ currentWord: emptyWord });\n    if (this.input.current)\n      this.input.current.focus();\n  }\n\n  handleChange(word) {\n    const { language } = this.props;\n    const currentWord = { ...word, score: scrabbleScore(word.value, word.modifiers, language) };\n    this.setState({ currentWord });\n  }\n\n  handleUndo() {\n    const { onUndo } = this.props;\n    onUndo();\n    this.resetCurrentWord();\n\n    logEvent('undo');\n  }\n\n  handleAddWord() {\n    const { currentWord } = this.state;\n    const { game } = this.props;\n    this.onSetGame(game.addWord(currentWord));\n    this._scroll();\n\n    logEvent('add-word', {'word': currentWord});\n  }\n\n  handleEndTurn(e) {\n    const { currentWord } = this.state;\n    let { game } = this.props;\n    if (currentWord.value.length !== 0)\n      game = game.addWord(currentWord);\n    this.onSetGame(game.endTurn());\n    this._scroll();\n\n    const data = currentWord.value.length !== 0\n                        ? {'word': currentWord}\n                        : {};\n    logEvent('end-turn', data);\n  }\n\n  handleBingo() {\n    const { game, onSetGame } = this.props;\n    onSetGame(game.setBingo(!game.getCurrentTurn().bingo));\n    this._scroll();\n\n    logEvent('toggle-bingo');\n  }\n\n  handleEndGame() {\n    const { game, onSetGame } = this.props;\n    onSetGame(game.endGame());\n    this._scroll();\n    if (process.env.NODE_ENV !== 'test')\n      noSleep.disable()\n\n    logEvent('end-game', {'num-of-turns': game.playersTurns.length,\n                          'game-turns': game.playersTurns.map((turns) => ({turns: turns}))});\n  }\n\n  render() {\n    const { currentWord } = this.state;\n    const { game, language, undoDisabled } = this.props;\n    const isCurrentWordEmpty = game.getCurrentTurn().isEmpty() && currentWord.value === ''\n    const endTurnButtonText = isCurrentWordEmpty ? 'PASS' : 'END TURN';\n    const isEndGameDisabled = game.currentPlayerIndex !== 0 || currentWord.value !== '' || game.getCurrentTurn().score > 0 || game.playersTurns[game.getCurrentPlayerIndex()].length === 1;\n    const isBingoDisabled = ![...game.getCurrentTurn().words, currentWord].some( word => word.value.length >= 7 )\n\n    const isModifierChosen = currentWord.modifiers.some(modifier => modifier.length !== 0);\n    const isInstructionShown = game.getCurrentTurnNumber() === 0 && game.getCurrentPlayerIndex() === 0 && !isModifierChosen && currentWord.value !== ''\n    const isFirstTurn = game.getCurrentTurnNumber() === 0 && game.getCurrentPlayerIndex() === 0\n    const isEndTurnDisabled = !isModifierChosen && !isCurrentWordEmpty && isFirstTurn;\n    const props = {\n      ref: this.input,\n      onChange: this.handleChange,\n      word: currentWord,\n      language,\n    };\n\n    return (\n      <form className={isFirstTurn ? 'first-turn' : null} onSubmit={(e) => e.preventDefault()} >\n        <ScrabbleInputBox {...props} />\n        <div className={`instruction-message ${isInstructionShown ? \"\" : \"hide\"}`}> \n          Click on the tile that is on the double word prime square\n        </div>\n\n        <div className=\"buttons\">\n         <div className=\"row\">\n            <div className=\"col\">\n              <button onClick={this.handleEndTurn} type=\"submit\" className=\"btn pass-endturn-button\" disabled={isEndTurnDisabled}>{endTurnButtonText}</button>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <button onClick={this.handleAddWord} type=\"button\" className=\"btn word-submit-button add-word\" disabled={currentWord.value === '' || isFirstTurn}>+ ADD A WORD</button>\n            </div>\n            <div className=\"col\">\n              <input onChange={this.handleBingo} type=\"checkbox\" id=\"bingoToggle\" checked={game.getCurrentTurn().bingo} disabled={isBingoDisabled}/>\n              <label className={`btn bingo ${isBingoDisabled ? \"disabled\" : \"\"}`} htmlFor=\"bingoToggle\">\n                BINGO\n              </label>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <button onClick={this.handleUndo} type=\"button\" className=\"btn word-submit-button undo\" disabled={undoDisabled}>UNDO</button>\n            </div>\n            <div className=\"col\">\n              <button onClick={this.handleEndGame} type=\"button\" className=\"btn end-game\" disabled={isEndGameDisabled}>END GAME</button>\n            </div>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\nexport default InGameControls;\n","import React from 'react';\nimport { scrabbleScore, logEvent } from '../../logic/util';\nimport ScrabbleInputBox from '../ScrabbleInputBox/ScrabbleInputBox';\n\nconst emptyWord = { value: '', modifiers: [], score: 0 };\n\nclass InGameOverControls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleLeftOvers = this.handleLeftOvers.bind(this);\n    this.input = React.createRef();\n    this.state = {\n      currentWord: emptyWord,\n    };\n  }\n\n  componentDidMount() {\n    if (this.input.current) this.input.current.focus();\n  }\n\n  resetCurrentWord() {\n    this.setState({ currentWord: emptyWord });\n    if (this.input.current) this.input.current.focus();\n  }\n\n  handleUndo() {\n    const { onUndo } = this.props;\n    onUndo();\n    this.resetCurrentWord();\n\n    logEvent('undo');\n  }\n\n  handleChange(word) {\n    const { language } = this.props;\n    const currentWord = { ...word, score: -scrabbleScore(word.value, word.modifiers, language) };\n    this.setState({ currentWord });\n  }\n\n  handleLeftOvers(e) {\n    const { currentWord } = this.state;\n    const { onSetGame } = this.props;\n    let { game } = this.props;\n\n    e.preventDefault(); /* prevent form submission */\n\n    if (currentWord.value.length !== 0) game = game.addWord(currentWord);\n    game = game.endTurn();\n\n    if (game.currentPlayerIndex === 0) {\n      game = game.distributeLeftOversToReapers(game.getReapers(), game.getSumOfLeftovers());\n    }\n\n    onSetGame(game);\n    this.resetCurrentWord();\n\n    const data = currentWord.value.length !== 0\n                    ? {'leftovers': currentWord}\n                    : {};\n    logEvent('submit-leftovers', data)\n  }\n\n  render() {\n    const { currentWord } = this.state;\n    const { game, language, undoDisabled } = this.props;\n    const submitButtonText = currentWord.value.length > 0 ? 'SUBMIT LEFTOVERS' : 'SUBMIT NO LEFTOVERS';\n    return (\n      <div>\n        {!game.areLeftOversSubmitted()\n          ? (\n            <form autoComplete=\"off\">\n              <ScrabbleInputBox\n                ref={this.input}\n                onChange={this.handleChange}\n                word={currentWord}\n                language={language}\n              />\n              <div className=\"buttons\">\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <button onClick={this.handleLeftOvers} type=\"submit\" className=\"btn pass-endturn-button\">{submitButtonText}</button>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <button onClick={this.handleUndo} type=\"button\" className=\"btn word-submit-button undo\" disabled={undoDisabled}>UNDO</button>\n                  </div>\n                </div>\n              </div>\n            </form>\n          )\n          : (\n            <div className=\"buttons\">\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button onClick={this.handleUndo} type=\"button\" className=\"btn word-submit-button undo\" disabled={undoDisabled}>UNDO</button>\n                  <a href=\"/\" className=\"btn word-submit-button new-game\">NEW GAME</a>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default InGameOverControls;\n","import React from 'react';\nimport Game from '../../logic/game';\nimport ScoreGrid from '../ScoreGrid/ScoreGrid';\nimport ScoreGridMobile from '../ScoreGrid/ScoreGridMobile';\nimport CallPlayerToAction from './CallPlayerToAction';\nimport InGameControls from './InGameControls';\nimport InGameOverControls from './InGameOverControls';\n\nclass ScoreKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleSetGame = this.handleSetGame.bind(this);\n    this.renderWinner = this.renderWinner.bind(this);\n\n    const { playerNames } = this.props;\n    const restoredState = JSON.parse(window.localStorage.getItem('ScoreKeeperState'));\n    this.state = restoredState\n      ? {\n          game: Game.fromPlain(restoredState.game),\n          games: restoredState.games.map(Game.fromPlain),\n        }\n      : {\n          game: Game.createNewGame(playerNames.length),\n          games: [],\n        };\n  }\n\n  handleSetGame(currentGame) {\n    const { game, games } = this.state;\n    const newState = {game: currentGame, games: [...games.slice(), game]};\n    this.setState(newState);\n    window.localStorage.setItem('ScoreKeeperState', JSON.stringify(newState));\n  }\n\n  handleUndo() {\n    const { games } = this.state;\n    const previousGames = games.slice(0, -1);\n    const game = games[games.length - 1];\n    this.setState({ game, games: previousGames });\n  }\n\n  renderWinner() {\n    const { game } = this.state;\n    const { playerNames } = this.props;\n    const turnBeforeLeftOvers = game.leftOversTurnNumber - 1;\n    const winners = game.getWinners();\n    if (winners.length > 1) {\n      const winnersTie = game.getWinners(turnBeforeLeftOvers);\n      return winnersTie.map(winnerIndex => (winnersTie.length > 1\n        ? `${playerNames[winnerIndex]}: ${game.getTotalScore(winnerIndex, turnBeforeLeftOvers)} points`\n        : `${playerNames[winnerIndex]} won with ${game.getTotalScore(winnerIndex, turnBeforeLeftOvers)} points!`)).join(', ');\n    }\n    return `${playerNames[winners[0]]} won with ${game.getTotalScore(winners[0])} points!`;\n  }\n\n  render() {\n    const { game, games } = this.state;\n    const { playerNames, language, isMobile } = this.props;\n\n    const controlProps = {\n      onSetGame: this.handleSetGame,\n      onUndo: this.handleUndo,\n      undoDisabled: games.length === 0,\n      isMobile,\n      game,\n      language,\n    };\n\n    const toDisplayCallPlayerToAction = () => {\n      if (!isMobile) {\n        return  <CallPlayerToAction game={game} playerNames={playerNames} isMobile={isMobile}/>\n      }\n    };\n\n    return (\n      <div className=\"score-keeper\">\n        <div className=\"container\">\n          <a id=\"small-logo\" href=\"/\">\n            <img src=\"logo.png\" alt=\"Scrabble score logo\"/>\n          </a>\n          <h1 className=\"title\">Scrabble Score Sheet</h1>\n          {isMobile\n            ? <ScoreGridMobile playerNames={playerNames} game={game} language={language} />\n            : <ScoreGrid playerNames={playerNames} game={game} language={language} />\n          }\n          {!game.areLeftOversSubmitted()\n            ? toDisplayCallPlayerToAction()\n            : (\n              <div className=\"winner\">\n                <h1>{this.renderWinner()}</h1>\n              </div>\n            )\n              }\n          {!game.isGameOver()\n            ? <InGameControls {...controlProps} />\n            : <InGameOverControls {...controlProps} />\n              }\n          <h3>How to use Scrabble Score Online:</h3>\n        <ul>\n          <li>To submit a word, type the word in the input box (the white rectangle above the buttons) then click END TURN</li>\n          <li>When scoring a word with a tile on a prime square (e.g., double-word), click on the coresponding tile in the input box\n              then choose a coresponding option from the window..</li>\n          <li>If you made a mistake, you may use unlimited UNDO.</li>\n\n          <li>\n            When forming more than one word, press ADD WORD after entering each word in the input box.\n          </li>\n          <li>\n            When a player used all seven tiles in a single turn, click BINGO.\n            This adds a 50 points bonus.\n          </li>\n          <li>\n          When using a BLANK tile, click on the coresponding tile and mark it as such.\n          </li>\n          <li>\n            When all the players finished their last turn, click END GAME.\n            Players will be then asked to enter their leftover tiles.\n            Players with leftover tiles get their leftover points deducted from their score.\n            Players with no leftovers collect the leftover points of all other players.\n          </li>\n        </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScoreKeeper;\n","import ReactGA from 'react-ga';\nimport React from 'react';\nimport GameSettings from '../GameSettings/GameSettings';\nimport ScoreKeeper from './ScoreKeeper';\nimport './App.css';\nimport { logEvent } from '../../logic/util';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleGameStart = this.handleGameStart.bind(this);\n    this.handleWindowSizeChange = this.handleWindowSizeChange.bind(this);\n    this.handlePopState = this.handlePopState.bind(this);\n\n    /*\n      DO NOT CHANGE INITIAL STATE:\n      the initial rendering of the component and the static rendering must be the same\n    */\n    this.state = {\n      playerNames: [],\n      language: 'en',\n      width: 10,\n    };\n  }\n\n  static maybeResetLocalStorage() {\n    if (!window.localStorage.getItem('ScrabbleScoreKeeperState'))\n      return;\n\n    if (process.env.NODE_ENV === 'test')\n      return;\n    \n    if (window.confirm('You have a game in progress.\\nWould you like to resume it?')) {\n      logEvent('game-resume')\n      return;\n    }\n\n    window.localStorage.removeItem('ScrabbleScoreKeeperState');\n    window.localStorage.removeItem('ScoreKeeperState');\n  }\n\n  componentDidMount() {\n    /* - pushState() allows to modifiy browser history entries;\n       - popstate listens for changes in browser history,like back/front button click;\n       - when history is changed, this.handlePopState function is being fired;\n       - this.handlePopState changes state for ScrabbleScoreKeeper component;\n       - ScrabbleScoreKeeper component rerenders, displaying correct state;\n    */\n\n    const { playerNames } = this.state;\n    window.history.pushState({ playerNames: playerNames }, null) \n    window.addEventListener('popstate', this.handlePopState); \n\n    ReactGA.initialize('UA-144533310-1');\n    ReactGA.pageview(window.location.pathname + window.location.search);\n    this.handleWindowSizeChange();\n\n\n    this.constructor.maybeResetLocalStorage();\n    const restoredState = JSON.parse(window.localStorage.getItem('ScrabbleScoreKeeperState'));\n    if (restoredState)\n      this.setState({playerNames: restoredState.playerNames})\n  }\n\n  UNSAFE_componentWillMount() {\n    window.addEventListener('resize', this.handleWindowSizeChange);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowSizeChange);\n    window.removeEventListener('popstate', this.handlePopState);\n  }\n\n  handlePopState(event) {\n   const stateObj = event.state;\n   this.setState({playerNames: stateObj.playerNames})\n  }\n\n  handleWindowSizeChange() {\n    this.setState({ width: window.innerWidth });\n  }\n\n  handleGameStart(playerNames, language) {\n    logEvent('start-game', {'player-names': playerNames, 'language': language});\n    window.history.pushState({ playerNames: playerNames }, null)\n    this.setState({ playerNames, language });\n\n    window.localStorage.setItem('ScrabbleScoreKeeperState', JSON.stringify({playerNames}))\n  }\n\n  renderGame(isMobile) {\n    const { playerNames, language } = this.state;\n    return playerNames.length === 0\n      ? <GameSettings onGameStart={this.handleGameStart} />\n      : <ScoreKeeper\n          playerNames={playerNames}\n          language={language}\n          isMobile={isMobile}\n        />;\n  }\n\n  render() {\n    const { width } = this.state;\n    const isMobile = width <= 815;\n    return (\n      <div className={`main ${isMobile ? 'mobile' : 'desktop'}`}>\n        {this.renderGame(isMobile)}\n      </div>\n    );\n  }\n}\n\nexport default App;","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It\"s the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from \"react-dom\";\nimport './index.css';\nimport App from './components/ScrabbleScoreKeeper/App';\nimport * as serviceWorker from './serviceWorker';\nimport { logEventInit } from './logic/util';\n\n\n/*This initializes amplitude event tracking instance*/\nlogEventInit()\n\nconst rootElement = document.getElementsByClassName('content')[0];\nif (rootElement.hasChildNodes()) {\n  hydrate(<App/>, rootElement);\n} else {\n  render(<App/>, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}